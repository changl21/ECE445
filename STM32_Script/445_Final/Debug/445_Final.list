
445_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037a8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000db4  08003940  08003940  00004940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046f4  080046f4  00006014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080046f4  080046f4  000056f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046fc  080046fc  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046fc  080046fc  000056fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004700  08004700  00005700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08004704  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000014  08004718  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08004718  00006268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac3c  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c1c  00000000  00000000  00010c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000950  00000000  00000000  000128a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00015ae9  00000000  00000000  000131f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000ae08  00000000  00000000  00028cd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00087468  00000000  00000000  00033ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000baf49  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000719  00000000  00000000  000baf8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000025b4  00000000  00000000  000bb6a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000bdc5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003928 	.word	0x08003928

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	08003928 	.word	0x08003928

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b988 	b.w	8000524 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	468e      	mov	lr, r1
 8000234:	4604      	mov	r4, r0
 8000236:	4688      	mov	r8, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d962      	bls.n	8000308 <__udivmoddi4+0xdc>
 8000242:	fab2 f682 	clz	r6, r2
 8000246:	b14e      	cbz	r6, 800025c <__udivmoddi4+0x30>
 8000248:	f1c6 0320 	rsb	r3, r6, #32
 800024c:	fa01 f806 	lsl.w	r8, r1, r6
 8000250:	fa20 f303 	lsr.w	r3, r0, r3
 8000254:	40b7      	lsls	r7, r6
 8000256:	ea43 0808 	orr.w	r8, r3, r8
 800025a:	40b4      	lsls	r4, r6
 800025c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000260:	fa1f fc87 	uxth.w	ip, r7
 8000264:	fbb8 f1fe 	udiv	r1, r8, lr
 8000268:	0c23      	lsrs	r3, r4, #16
 800026a:	fb0e 8811 	mls	r8, lr, r1, r8
 800026e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000272:	fb01 f20c 	mul.w	r2, r1, ip
 8000276:	429a      	cmp	r2, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x62>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000280:	f080 80ea 	bcs.w	8000458 <__udivmoddi4+0x22c>
 8000284:	429a      	cmp	r2, r3
 8000286:	f240 80e7 	bls.w	8000458 <__udivmoddi4+0x22c>
 800028a:	3902      	subs	r1, #2
 800028c:	443b      	add	r3, r7
 800028e:	1a9a      	subs	r2, r3, r2
 8000290:	b2a3      	uxth	r3, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800029e:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a2:	459c      	cmp	ip, r3
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0x8e>
 80002a6:	18fb      	adds	r3, r7, r3
 80002a8:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002ac:	f080 80d6 	bcs.w	800045c <__udivmoddi4+0x230>
 80002b0:	459c      	cmp	ip, r3
 80002b2:	f240 80d3 	bls.w	800045c <__udivmoddi4+0x230>
 80002b6:	443b      	add	r3, r7
 80002b8:	3802      	subs	r0, #2
 80002ba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002be:	eba3 030c 	sub.w	r3, r3, ip
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11d      	cbz	r5, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40f3      	lsrs	r3, r6
 80002c8:	2200      	movs	r2, #0
 80002ca:	e9c5 3200 	strd	r3, r2, [r5]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d905      	bls.n	80002e2 <__udivmoddi4+0xb6>
 80002d6:	b10d      	cbz	r5, 80002dc <__udivmoddi4+0xb0>
 80002d8:	e9c5 0100 	strd	r0, r1, [r5]
 80002dc:	2100      	movs	r1, #0
 80002de:	4608      	mov	r0, r1
 80002e0:	e7f5      	b.n	80002ce <__udivmoddi4+0xa2>
 80002e2:	fab3 f183 	clz	r1, r3
 80002e6:	2900      	cmp	r1, #0
 80002e8:	d146      	bne.n	8000378 <__udivmoddi4+0x14c>
 80002ea:	4573      	cmp	r3, lr
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xc8>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 8105 	bhi.w	80004fe <__udivmoddi4+0x2d2>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	4690      	mov	r8, r2
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e5      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000302:	e9c5 4800 	strd	r4, r8, [r5]
 8000306:	e7e2      	b.n	80002ce <__udivmoddi4+0xa2>
 8000308:	2a00      	cmp	r2, #0
 800030a:	f000 8090 	beq.w	800042e <__udivmoddi4+0x202>
 800030e:	fab2 f682 	clz	r6, r2
 8000312:	2e00      	cmp	r6, #0
 8000314:	f040 80a4 	bne.w	8000460 <__udivmoddi4+0x234>
 8000318:	1a8a      	subs	r2, r1, r2
 800031a:	0c03      	lsrs	r3, r0, #16
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	b280      	uxth	r0, r0
 8000322:	b2bc      	uxth	r4, r7
 8000324:	2101      	movs	r1, #1
 8000326:	fbb2 fcfe 	udiv	ip, r2, lr
 800032a:	fb0e 221c 	mls	r2, lr, ip, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb04 f20c 	mul.w	r2, r4, ip
 8000336:	429a      	cmp	r2, r3
 8000338:	d907      	bls.n	800034a <__udivmoddi4+0x11e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x11c>
 8000342:	429a      	cmp	r2, r3
 8000344:	f200 80e0 	bhi.w	8000508 <__udivmoddi4+0x2dc>
 8000348:	46c4      	mov	ip, r8
 800034a:	1a9b      	subs	r3, r3, r2
 800034c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000350:	fb0e 3312 	mls	r3, lr, r2, r3
 8000354:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000358:	fb02 f404 	mul.w	r4, r2, r4
 800035c:	429c      	cmp	r4, r3
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x144>
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x142>
 8000368:	429c      	cmp	r4, r3
 800036a:	f200 80ca 	bhi.w	8000502 <__udivmoddi4+0x2d6>
 800036e:	4602      	mov	r2, r0
 8000370:	1b1b      	subs	r3, r3, r4
 8000372:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000376:	e7a5      	b.n	80002c4 <__udivmoddi4+0x98>
 8000378:	f1c1 0620 	rsb	r6, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 f706 	lsr.w	r7, r2, r6
 8000382:	431f      	orrs	r7, r3
 8000384:	fa0e f401 	lsl.w	r4, lr, r1
 8000388:	fa20 f306 	lsr.w	r3, r0, r6
 800038c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000390:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	fa1f fc87 	uxth.w	ip, r7
 800039e:	fbbe f0f9 	udiv	r0, lr, r9
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	fb09 ee10 	mls	lr, r9, r0, lr
 80003a8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003ac:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	fa02 f201 	lsl.w	r2, r2, r1
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x1a0>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003be:	f080 809c 	bcs.w	80004fa <__udivmoddi4+0x2ce>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8099 	bls.w	80004fa <__udivmoddi4+0x2ce>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	fa1f fe83 	uxth.w	lr, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e4:	45a4      	cmp	ip, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1ce>
 80003e8:	193c      	adds	r4, r7, r4
 80003ea:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ee:	f080 8082 	bcs.w	80004f6 <__udivmoddi4+0x2ca>
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d97f      	bls.n	80004f6 <__udivmoddi4+0x2ca>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	443c      	add	r4, r7
 80003fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003fe:	eba4 040c 	sub.w	r4, r4, ip
 8000402:	fba0 ec02 	umull	lr, ip, r0, r2
 8000406:	4564      	cmp	r4, ip
 8000408:	4673      	mov	r3, lr
 800040a:	46e1      	mov	r9, ip
 800040c:	d362      	bcc.n	80004d4 <__udivmoddi4+0x2a8>
 800040e:	d05f      	beq.n	80004d0 <__udivmoddi4+0x2a4>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x1fe>
 8000412:	ebb8 0203 	subs.w	r2, r8, r3
 8000416:	eb64 0409 	sbc.w	r4, r4, r9
 800041a:	fa04 f606 	lsl.w	r6, r4, r6
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431e      	orrs	r6, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c5 6400 	strd	r6, r4, [r5]
 800042a:	2100      	movs	r1, #0
 800042c:	e74f      	b.n	80002ce <__udivmoddi4+0xa2>
 800042e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000432:	0c01      	lsrs	r1, r0, #16
 8000434:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000438:	b280      	uxth	r0, r0
 800043a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800043e:	463b      	mov	r3, r7
 8000440:	4638      	mov	r0, r7
 8000442:	463c      	mov	r4, r7
 8000444:	46b8      	mov	r8, r7
 8000446:	46be      	mov	lr, r7
 8000448:	2620      	movs	r6, #32
 800044a:	fbb1 f1f7 	udiv	r1, r1, r7
 800044e:	eba2 0208 	sub.w	r2, r2, r8
 8000452:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000456:	e766      	b.n	8000326 <__udivmoddi4+0xfa>
 8000458:	4601      	mov	r1, r0
 800045a:	e718      	b.n	800028e <__udivmoddi4+0x62>
 800045c:	4610      	mov	r0, r2
 800045e:	e72c      	b.n	80002ba <__udivmoddi4+0x8e>
 8000460:	f1c6 0220 	rsb	r2, r6, #32
 8000464:	fa2e f302 	lsr.w	r3, lr, r2
 8000468:	40b7      	lsls	r7, r6
 800046a:	40b1      	lsls	r1, r6
 800046c:	fa20 f202 	lsr.w	r2, r0, r2
 8000470:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000474:	430a      	orrs	r2, r1
 8000476:	fbb3 f8fe 	udiv	r8, r3, lr
 800047a:	b2bc      	uxth	r4, r7
 800047c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000480:	0c11      	lsrs	r1, r2, #16
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb08 f904 	mul.w	r9, r8, r4
 800048a:	40b0      	lsls	r0, r6
 800048c:	4589      	cmp	r9, r1
 800048e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000492:	b280      	uxth	r0, r0
 8000494:	d93e      	bls.n	8000514 <__udivmoddi4+0x2e8>
 8000496:	1879      	adds	r1, r7, r1
 8000498:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x276>
 800049e:	4589      	cmp	r9, r1
 80004a0:	d81f      	bhi.n	80004e2 <__udivmoddi4+0x2b6>
 80004a2:	eba1 0109 	sub.w	r1, r1, r9
 80004a6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004aa:	fb09 f804 	mul.w	r8, r9, r4
 80004ae:	fb0e 1119 	mls	r1, lr, r9, r1
 80004b2:	b292      	uxth	r2, r2
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d229      	bcs.n	8000510 <__udivmoddi4+0x2e4>
 80004bc:	18ba      	adds	r2, r7, r2
 80004be:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004c2:	d2c4      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c4:	4542      	cmp	r2, r8
 80004c6:	d2c2      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c8:	f1a9 0102 	sub.w	r1, r9, #2
 80004cc:	443a      	add	r2, r7
 80004ce:	e7be      	b.n	800044e <__udivmoddi4+0x222>
 80004d0:	45f0      	cmp	r8, lr
 80004d2:	d29d      	bcs.n	8000410 <__udivmoddi4+0x1e4>
 80004d4:	ebbe 0302 	subs.w	r3, lr, r2
 80004d8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004dc:	3801      	subs	r0, #1
 80004de:	46e1      	mov	r9, ip
 80004e0:	e796      	b.n	8000410 <__udivmoddi4+0x1e4>
 80004e2:	eba7 0909 	sub.w	r9, r7, r9
 80004e6:	4449      	add	r1, r9
 80004e8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004ec:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f0:	fb09 f804 	mul.w	r8, r9, r4
 80004f4:	e7db      	b.n	80004ae <__udivmoddi4+0x282>
 80004f6:	4673      	mov	r3, lr
 80004f8:	e77f      	b.n	80003fa <__udivmoddi4+0x1ce>
 80004fa:	4650      	mov	r0, sl
 80004fc:	e766      	b.n	80003cc <__udivmoddi4+0x1a0>
 80004fe:	4608      	mov	r0, r1
 8000500:	e6fd      	b.n	80002fe <__udivmoddi4+0xd2>
 8000502:	443b      	add	r3, r7
 8000504:	3a02      	subs	r2, #2
 8000506:	e733      	b.n	8000370 <__udivmoddi4+0x144>
 8000508:	f1ac 0c02 	sub.w	ip, ip, #2
 800050c:	443b      	add	r3, r7
 800050e:	e71c      	b.n	800034a <__udivmoddi4+0x11e>
 8000510:	4649      	mov	r1, r9
 8000512:	e79c      	b.n	800044e <__udivmoddi4+0x222>
 8000514:	eba1 0109 	sub.w	r1, r1, r9
 8000518:	46c4      	mov	ip, r8
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	e7c4      	b.n	80004ae <__udivmoddi4+0x282>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <ILI9341_Select>:
/* vim: set ai et ts=4 sw=4: */
#include "stm32f4xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	2110      	movs	r1, #16
 8000530:	4802      	ldr	r0, [pc, #8]	@ (800053c <ILI9341_Select+0x14>)
 8000532:	f001 fa53 	bl	80019dc <HAL_GPIO_WritePin>
}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40020800 	.word	0x40020800

08000540 <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8000544:	2201      	movs	r2, #1
 8000546:	2110      	movs	r1, #16
 8000548:	4802      	ldr	r0, [pc, #8]	@ (8000554 <ILI9341_Unselect+0x14>)
 800054a:	f001 fa47 	bl	80019dc <HAL_GPIO_WritePin>
}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40020800 	.word	0x40020800

08000558 <ILI9341_Reset>:

static void ILI9341_Reset() {
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	2120      	movs	r1, #32
 8000560:	4806      	ldr	r0, [pc, #24]	@ (800057c <ILI9341_Reset+0x24>)
 8000562:	f001 fa3b 	bl	80019dc <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000566:	2005      	movs	r0, #5
 8000568:	f000 feec 	bl	8001344 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 800056c:	2201      	movs	r2, #1
 800056e:	2120      	movs	r1, #32
 8000570:	4802      	ldr	r0, [pc, #8]	@ (800057c <ILI9341_Reset+0x24>)
 8000572:	f001 fa33 	bl	80019dc <HAL_GPIO_WritePin>
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40020800 	.word	0x40020800

08000580 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2101      	movs	r1, #1
 800058e:	4807      	ldr	r0, [pc, #28]	@ (80005ac <ILI9341_WriteCommand+0x2c>)
 8000590:	f001 fa24 	bl	80019dc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000594:	1df9      	adds	r1, r7, #7
 8000596:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800059a:	2201      	movs	r2, #1
 800059c:	4804      	ldr	r0, [pc, #16]	@ (80005b0 <ILI9341_WriteCommand+0x30>)
 800059e:	f001 ff58 	bl	8002452 <HAL_SPI_Transmit>
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40020400 	.word	0x40020400
 80005b0:	20000030 	.word	0x20000030

080005b4 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80005be:	2201      	movs	r2, #1
 80005c0:	2101      	movs	r1, #1
 80005c2:	4811      	ldr	r0, [pc, #68]	@ (8000608 <ILI9341_WriteData+0x54>)
 80005c4:	f001 fa0a 	bl	80019dc <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 80005c8:	e015      	b.n	80005f6 <ILI9341_WriteData+0x42>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80005d0:	bf28      	it	cs
 80005d2:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 80005d6:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80005d8:	89fa      	ldrh	r2, [r7, #14]
 80005da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005de:	6879      	ldr	r1, [r7, #4]
 80005e0:	480a      	ldr	r0, [pc, #40]	@ (800060c <ILI9341_WriteData+0x58>)
 80005e2:	f001 ff36 	bl	8002452 <HAL_SPI_Transmit>
        buff += chunk_size;
 80005e6:	89fb      	ldrh	r3, [r7, #14]
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	4413      	add	r3, r2
 80005ec:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 80005ee:	89fb      	ldrh	r3, [r7, #14]
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	1ad3      	subs	r3, r2, r3
 80005f4:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d1e6      	bne.n	80005ca <ILI9341_WriteData+0x16>
    }
}
 80005fc:	bf00      	nop
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40020400 	.word	0x40020400
 800060c:	20000030 	.word	0x20000030

08000610 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	4604      	mov	r4, r0
 8000618:	4608      	mov	r0, r1
 800061a:	4611      	mov	r1, r2
 800061c:	461a      	mov	r2, r3
 800061e:	4623      	mov	r3, r4
 8000620:	80fb      	strh	r3, [r7, #6]
 8000622:	4603      	mov	r3, r0
 8000624:	80bb      	strh	r3, [r7, #4]
 8000626:	460b      	mov	r3, r1
 8000628:	807b      	strh	r3, [r7, #2]
 800062a:	4613      	mov	r3, r2
 800062c:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 800062e:	202a      	movs	r0, #42	@ 0x2a
 8000630:	f7ff ffa6 	bl	8000580 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8000634:	88fb      	ldrh	r3, [r7, #6]
 8000636:	0a1b      	lsrs	r3, r3, #8
 8000638:	b29b      	uxth	r3, r3
 800063a:	b2db      	uxtb	r3, r3
 800063c:	733b      	strb	r3, [r7, #12]
 800063e:	88fb      	ldrh	r3, [r7, #6]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	737b      	strb	r3, [r7, #13]
 8000644:	887b      	ldrh	r3, [r7, #2]
 8000646:	0a1b      	lsrs	r3, r3, #8
 8000648:	b29b      	uxth	r3, r3
 800064a:	b2db      	uxtb	r3, r3
 800064c:	73bb      	strb	r3, [r7, #14]
 800064e:	887b      	ldrh	r3, [r7, #2]
 8000650:	b2db      	uxtb	r3, r3
 8000652:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2104      	movs	r1, #4
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ffaa 	bl	80005b4 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8000660:	202b      	movs	r0, #43	@ 0x2b
 8000662:	f7ff ff8d 	bl	8000580 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8000666:	88bb      	ldrh	r3, [r7, #4]
 8000668:	0a1b      	lsrs	r3, r3, #8
 800066a:	b29b      	uxth	r3, r3
 800066c:	b2db      	uxtb	r3, r3
 800066e:	723b      	strb	r3, [r7, #8]
 8000670:	88bb      	ldrh	r3, [r7, #4]
 8000672:	b2db      	uxtb	r3, r3
 8000674:	727b      	strb	r3, [r7, #9]
 8000676:	883b      	ldrh	r3, [r7, #0]
 8000678:	0a1b      	lsrs	r3, r3, #8
 800067a:	b29b      	uxth	r3, r3
 800067c:	b2db      	uxtb	r3, r3
 800067e:	72bb      	strb	r3, [r7, #10]
 8000680:	883b      	ldrh	r3, [r7, #0]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 8000686:	f107 0308 	add.w	r3, r7, #8
 800068a:	2104      	movs	r1, #4
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ff91 	bl	80005b4 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 8000692:	202c      	movs	r0, #44	@ 0x2c
 8000694:	f7ff ff74 	bl	8000580 <ILI9341_WriteCommand>
}
 8000698:	bf00      	nop
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	bd90      	pop	{r4, r7, pc}

080006a0 <ILI9341_Init>:

void ILI9341_Init() {
 80006a0:	b590      	push	{r4, r7, lr}
 80006a2:	b09b      	sub	sp, #108	@ 0x6c
 80006a4:	af00      	add	r7, sp, #0
    ILI9341_Select();
 80006a6:	f7ff ff3f 	bl	8000528 <ILI9341_Select>
    ILI9341_Reset();
 80006aa:	f7ff ff55 	bl	8000558 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 80006ae:	2001      	movs	r0, #1
 80006b0:	f7ff ff66 	bl	8000580 <ILI9341_WriteCommand>
    HAL_Delay(1000);
 80006b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006b8:	f000 fe44 	bl	8001344 <HAL_Delay>
        
    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 80006bc:	20cb      	movs	r0, #203	@ 0xcb
 80006be:	f7ff ff5f 	bl	8000580 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 80006c2:	4a87      	ldr	r2, [pc, #540]	@ (80008e0 <ILI9341_Init+0x240>)
 80006c4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80006c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006cc:	6018      	str	r0, [r3, #0]
 80006ce:	3304      	adds	r3, #4
 80006d0:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80006d2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80006d6:	2105      	movs	r1, #5
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ff6b 	bl	80005b4 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 80006de:	20cf      	movs	r0, #207	@ 0xcf
 80006e0:	f7ff ff4e 	bl	8000580 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 80006e4:	4a7f      	ldr	r2, [pc, #508]	@ (80008e4 <ILI9341_Init+0x244>)
 80006e6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80006ea:	6812      	ldr	r2, [r2, #0]
 80006ec:	4611      	mov	r1, r2
 80006ee:	8019      	strh	r1, [r3, #0]
 80006f0:	3302      	adds	r3, #2
 80006f2:	0c12      	lsrs	r2, r2, #16
 80006f4:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80006f6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80006fa:	2103      	movs	r1, #3
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff59 	bl	80005b4 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 8000702:	20e8      	movs	r0, #232	@ 0xe8
 8000704:	f7ff ff3c 	bl	8000580 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8000708:	4a77      	ldr	r2, [pc, #476]	@ (80008e8 <ILI9341_Init+0x248>)
 800070a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800070e:	6812      	ldr	r2, [r2, #0]
 8000710:	4611      	mov	r1, r2
 8000712:	8019      	strh	r1, [r3, #0]
 8000714:	3302      	adds	r3, #2
 8000716:	0c12      	lsrs	r2, r2, #16
 8000718:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800071a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800071e:	2103      	movs	r1, #3
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ff47 	bl	80005b4 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 8000726:	20ea      	movs	r0, #234	@ 0xea
 8000728:	f7ff ff2a 	bl	8000580 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 800072c:	2300      	movs	r3, #0
 800072e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        ILI9341_WriteData(data, sizeof(data));
 8000732:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000736:	2102      	movs	r1, #2
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff ff3b 	bl	80005b4 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 800073e:	20ed      	movs	r0, #237	@ 0xed
 8000740:	f7ff ff1e 	bl	8000580 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8000744:	4b69      	ldr	r3, [pc, #420]	@ (80008ec <ILI9341_Init+0x24c>)
 8000746:	653b      	str	r3, [r7, #80]	@ 0x50
        ILI9341_WriteData(data, sizeof(data));
 8000748:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800074c:	2104      	movs	r1, #4
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff ff30 	bl	80005b4 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 8000754:	20f7      	movs	r0, #247	@ 0xf7
 8000756:	f7ff ff13 	bl	8000580 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 800075a:	2320      	movs	r3, #32
 800075c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
        ILI9341_WriteData(data, sizeof(data));
 8000760:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000764:	2101      	movs	r1, #1
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ff24 	bl	80005b4 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 800076c:	20c0      	movs	r0, #192	@ 0xc0
 800076e:	f7ff ff07 	bl	8000580 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 8000772:	2323      	movs	r3, #35	@ 0x23
 8000774:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        ILI9341_WriteData(data, sizeof(data));
 8000778:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800077c:	2101      	movs	r1, #1
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff ff18 	bl	80005b4 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 8000784:	20c1      	movs	r0, #193	@ 0xc1
 8000786:	f7ff fefb 	bl	8000580 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 800078a:	2310      	movs	r3, #16
 800078c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
        ILI9341_WriteData(data, sizeof(data));
 8000790:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000794:	2101      	movs	r1, #1
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff ff0c 	bl	80005b4 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 800079c:	20c5      	movs	r0, #197	@ 0xc5
 800079e:	f7ff feef 	bl	8000580 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 80007a2:	f642 033e 	movw	r3, #10302	@ 0x283e
 80007a6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        ILI9341_WriteData(data, sizeof(data));
 80007aa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007ae:	2102      	movs	r1, #2
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff feff 	bl	80005b4 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 80007b6:	20c7      	movs	r0, #199	@ 0xc7
 80007b8:	f7ff fee2 	bl	8000580 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 80007bc:	2386      	movs	r3, #134	@ 0x86
 80007be:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        ILI9341_WriteData(data, sizeof(data));
 80007c2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80007c6:	2101      	movs	r1, #1
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff fef3 	bl	80005b4 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 80007ce:	2036      	movs	r0, #54	@ 0x36
 80007d0:	f7ff fed6 	bl	8000580 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 80007d4:	2348      	movs	r3, #72	@ 0x48
 80007d6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        ILI9341_WriteData(data, sizeof(data));
 80007da:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007de:	2101      	movs	r1, #1
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fee7 	bl	80005b4 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 80007e6:	203a      	movs	r0, #58	@ 0x3a
 80007e8:	f7ff feca 	bl	8000580 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 80007ec:	2355      	movs	r3, #85	@ 0x55
 80007ee:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        ILI9341_WriteData(data, sizeof(data));
 80007f2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80007f6:	2101      	movs	r1, #1
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff fedb 	bl	80005b4 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 80007fe:	20b1      	movs	r0, #177	@ 0xb1
 8000800:	f7ff febe 	bl	8000580 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 8000804:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000808:	863b      	strh	r3, [r7, #48]	@ 0x30
        ILI9341_WriteData(data, sizeof(data));
 800080a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800080e:	2102      	movs	r1, #2
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff fecf 	bl	80005b4 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 8000816:	20b6      	movs	r0, #182	@ 0xb6
 8000818:	f7ff feb2 	bl	8000580 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 800081c:	4a34      	ldr	r2, [pc, #208]	@ (80008f0 <ILI9341_Init+0x250>)
 800081e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000822:	6812      	ldr	r2, [r2, #0]
 8000824:	4611      	mov	r1, r2
 8000826:	8019      	strh	r1, [r3, #0]
 8000828:	3302      	adds	r3, #2
 800082a:	0c12      	lsrs	r2, r2, #16
 800082c:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800082e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000832:	2103      	movs	r1, #3
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff febd 	bl	80005b4 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 800083a:	20f2      	movs	r0, #242	@ 0xf2
 800083c:	f7ff fea0 	bl	8000580 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 8000840:	2300      	movs	r3, #0
 8000842:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        ILI9341_WriteData(data, sizeof(data));
 8000846:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800084a:	2101      	movs	r1, #1
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff feb1 	bl	80005b4 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 8000852:	2026      	movs	r0, #38	@ 0x26
 8000854:	f7ff fe94 	bl	8000580 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 8000858:	2301      	movs	r3, #1
 800085a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        ILI9341_WriteData(data, sizeof(data));
 800085e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000862:	2101      	movs	r1, #1
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff fea5 	bl	80005b4 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 800086a:	20e0      	movs	r0, #224	@ 0xe0
 800086c:	f7ff fe88 	bl	8000580 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8000870:	4b20      	ldr	r3, [pc, #128]	@ (80008f4 <ILI9341_Init+0x254>)
 8000872:	f107 0414 	add.w	r4, r7, #20
 8000876:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000878:	c407      	stmia	r4!, {r0, r1, r2}
 800087a:	8023      	strh	r3, [r4, #0]
 800087c:	3402      	adds	r4, #2
 800087e:	0c1b      	lsrs	r3, r3, #16
 8000880:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	210f      	movs	r1, #15
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fe93 	bl	80005b4 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 800088e:	20e1      	movs	r0, #225	@ 0xe1
 8000890:	f7ff fe76 	bl	8000580 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8000894:	4b18      	ldr	r3, [pc, #96]	@ (80008f8 <ILI9341_Init+0x258>)
 8000896:	1d3c      	adds	r4, r7, #4
 8000898:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800089a:	c407      	stmia	r4!, {r0, r1, r2}
 800089c:	8023      	strh	r3, [r4, #0]
 800089e:	3402      	adds	r4, #2
 80008a0:	0c1b      	lsrs	r3, r3, #16
 80008a2:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	210f      	movs	r1, #15
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff fe83 	bl	80005b4 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 80008ae:	2011      	movs	r0, #17
 80008b0:	f7ff fe66 	bl	8000580 <ILI9341_WriteCommand>
    HAL_Delay(120);
 80008b4:	2078      	movs	r0, #120	@ 0x78
 80008b6:	f000 fd45 	bl	8001344 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 80008ba:	2029      	movs	r0, #41	@ 0x29
 80008bc:	f7ff fe60 	bl	8000580 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 80008c0:	2036      	movs	r0, #54	@ 0x36
 80008c2:	f7ff fe5d 	bl	8000580 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 80008c6:	2348      	movs	r3, #72	@ 0x48
 80008c8:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 80008ca:	463b      	mov	r3, r7
 80008cc:	2101      	movs	r1, #1
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff fe70 	bl	80005b4 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 80008d4:	f7ff fe34 	bl	8000540 <ILI9341_Unselect>
}
 80008d8:	bf00      	nop
 80008da:	376c      	adds	r7, #108	@ 0x6c
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd90      	pop	{r4, r7, pc}
 80008e0:	08003940 	.word	0x08003940
 80008e4:	08003948 	.word	0x08003948
 80008e8:	0800394c 	.word	0x0800394c
 80008ec:	81120364 	.word	0x81120364
 80008f0:	08003950 	.word	0x08003950
 80008f4:	08003954 	.word	0x08003954
 80008f8:	08003964 	.word	0x08003964

080008fc <ILI9341_WriteChar>:
    ILI9341_WriteData(data, sizeof(data));

    ILI9341_Unselect();
}

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80008fc:	b082      	sub	sp, #8
 80008fe:	b580      	push	{r7, lr}
 8000900:	b088      	sub	sp, #32
 8000902:	af00      	add	r7, sp, #0
 8000904:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000906:	4603      	mov	r3, r0
 8000908:	80fb      	strh	r3, [r7, #6]
 800090a:	460b      	mov	r3, r1
 800090c:	80bb      	strh	r3, [r7, #4]
 800090e:	4613      	mov	r3, r2
 8000910:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000912:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000916:	461a      	mov	r2, r3
 8000918:	88fb      	ldrh	r3, [r7, #6]
 800091a:	4413      	add	r3, r2
 800091c:	b29b      	uxth	r3, r3
 800091e:	3b01      	subs	r3, #1
 8000920:	b29a      	uxth	r2, r3
 8000922:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000926:	4619      	mov	r1, r3
 8000928:	88bb      	ldrh	r3, [r7, #4]
 800092a:	440b      	add	r3, r1
 800092c:	b29b      	uxth	r3, r3
 800092e:	3b01      	subs	r3, #1
 8000930:	b29b      	uxth	r3, r3
 8000932:	88b9      	ldrh	r1, [r7, #4]
 8000934:	88f8      	ldrh	r0, [r7, #6]
 8000936:	f7ff fe6b 	bl	8000610 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
 800093e:	e041      	b.n	80009c4 <ILI9341_WriteChar+0xc8>
        b = font.data[(ch - 32) * font.height + i];
 8000940:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000942:	78fb      	ldrb	r3, [r7, #3]
 8000944:	3b20      	subs	r3, #32
 8000946:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800094a:	fb01 f303 	mul.w	r3, r1, r3
 800094e:	4619      	mov	r1, r3
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	440b      	add	r3, r1
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	4413      	add	r3, r2
 8000958:	881b      	ldrh	r3, [r3, #0]
 800095a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800095c:	2300      	movs	r3, #0
 800095e:	61bb      	str	r3, [r7, #24]
 8000960:	e027      	b.n	80009b2 <ILI9341_WriteChar+0xb6>
            if((b << j) & 0x8000)  {
 8000962:	697a      	ldr	r2, [r7, #20]
 8000964:	69bb      	ldr	r3, [r7, #24]
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800096e:	2b00      	cmp	r3, #0
 8000970:	d00e      	beq.n	8000990 <ILI9341_WriteChar+0x94>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000972:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000974:	0a1b      	lsrs	r3, r3, #8
 8000976:	b29b      	uxth	r3, r3
 8000978:	b2db      	uxtb	r3, r3
 800097a:	743b      	strb	r3, [r7, #16]
 800097c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800097e:	b2db      	uxtb	r3, r3
 8000980:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 8000982:	f107 0310 	add.w	r3, r7, #16
 8000986:	2102      	movs	r1, #2
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff fe13 	bl	80005b4 <ILI9341_WriteData>
 800098e:	e00d      	b.n	80009ac <ILI9341_WriteChar+0xb0>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000990:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000992:	0a1b      	lsrs	r3, r3, #8
 8000994:	b29b      	uxth	r3, r3
 8000996:	b2db      	uxtb	r3, r3
 8000998:	733b      	strb	r3, [r7, #12]
 800099a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800099c:	b2db      	uxtb	r3, r3
 800099e:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	2102      	movs	r1, #2
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fe04 	bl	80005b4 <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	3301      	adds	r3, #1
 80009b0:	61bb      	str	r3, [r7, #24]
 80009b2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80009b6:	461a      	mov	r2, r3
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d3d1      	bcc.n	8000962 <ILI9341_WriteChar+0x66>
    for(i = 0; i < font.height; i++) {
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	3301      	adds	r3, #1
 80009c2:	61fb      	str	r3, [r7, #28]
 80009c4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80009c8:	461a      	mov	r2, r3
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d3b7      	bcc.n	8000940 <ILI9341_WriteChar+0x44>
            }
        }
    }
}
 80009d0:	bf00      	nop
 80009d2:	bf00      	nop
 80009d4:	3720      	adds	r7, #32
 80009d6:	46bd      	mov	sp, r7
 80009d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009dc:	b002      	add	sp, #8
 80009de:	4770      	bx	lr

080009e0 <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80009e0:	b082      	sub	sp, #8
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b086      	sub	sp, #24
 80009e6:	af04      	add	r7, sp, #16
 80009e8:	603a      	str	r2, [r7, #0]
 80009ea:	617b      	str	r3, [r7, #20]
 80009ec:	4603      	mov	r3, r0
 80009ee:	80fb      	strh	r3, [r7, #6]
 80009f0:	460b      	mov	r3, r1
 80009f2:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 80009f4:	f7ff fd98 	bl	8000528 <ILI9341_Select>

    while(*str) {
 80009f8:	e02e      	b.n	8000a58 <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 80009fa:	88fb      	ldrh	r3, [r7, #6]
 80009fc:	7d3a      	ldrb	r2, [r7, #20]
 80009fe:	4413      	add	r3, r2
 8000a00:	2bef      	cmp	r3, #239	@ 0xef
 8000a02:	dd14      	ble.n	8000a2e <ILI9341_WriteString+0x4e>
            x = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000a08:	7d7b      	ldrb	r3, [r7, #21]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	88bb      	ldrh	r3, [r7, #4]
 8000a0e:	4413      	add	r3, r2
 8000a10:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 8000a12:	88bb      	ldrh	r3, [r7, #4]
 8000a14:	7d7a      	ldrb	r2, [r7, #21]
 8000a16:	4413      	add	r3, r2
 8000a18:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a1c:	da21      	bge.n	8000a62 <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b20      	cmp	r3, #32
 8000a24:	d103      	bne.n	8000a2e <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	603b      	str	r3, [r7, #0]
                continue;
 8000a2c:	e014      	b.n	8000a58 <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	781a      	ldrb	r2, [r3, #0]
 8000a32:	88b9      	ldrh	r1, [r7, #4]
 8000a34:	88f8      	ldrh	r0, [r7, #6]
 8000a36:	8c3b      	ldrh	r3, [r7, #32]
 8000a38:	9302      	str	r3, [sp, #8]
 8000a3a:	8bbb      	ldrh	r3, [r7, #28]
 8000a3c:	9301      	str	r3, [sp, #4]
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	f7ff ff5a 	bl	80008fc <ILI9341_WriteChar>
        x += font.width;
 8000a48:	7d3b      	ldrb	r3, [r7, #20]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	88fb      	ldrh	r3, [r7, #6]
 8000a4e:	4413      	add	r3, r2
 8000a50:	80fb      	strh	r3, [r7, #6]
        str++;
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	3301      	adds	r3, #1
 8000a56:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d1cc      	bne.n	80009fa <ILI9341_WriteString+0x1a>
 8000a60:	e000      	b.n	8000a64 <ILI9341_WriteString+0x84>
                break;
 8000a62:	bf00      	nop
    }

    ILI9341_Unselect();
 8000a64:	f7ff fd6c 	bl	8000540 <ILI9341_Unselect>
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a72:	b002      	add	sp, #8
 8000a74:	4770      	bx	lr
	...

08000a78 <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000a78:	b590      	push	{r4, r7, lr}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4604      	mov	r4, r0
 8000a80:	4608      	mov	r0, r1
 8000a82:	4611      	mov	r1, r2
 8000a84:	461a      	mov	r2, r3
 8000a86:	4623      	mov	r3, r4
 8000a88:	80fb      	strh	r3, [r7, #6]
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	80bb      	strh	r3, [r7, #4]
 8000a8e:	460b      	mov	r3, r1
 8000a90:	807b      	strh	r3, [r7, #2]
 8000a92:	4613      	mov	r3, r2
 8000a94:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000a96:	88fb      	ldrh	r3, [r7, #6]
 8000a98:	2bef      	cmp	r3, #239	@ 0xef
 8000a9a:	d853      	bhi.n	8000b44 <ILI9341_FillRectangle+0xcc>
 8000a9c:	88bb      	ldrh	r3, [r7, #4]
 8000a9e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000aa2:	d24f      	bcs.n	8000b44 <ILI9341_FillRectangle+0xcc>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8000aa4:	88fa      	ldrh	r2, [r7, #6]
 8000aa6:	887b      	ldrh	r3, [r7, #2]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	2bf0      	cmp	r3, #240	@ 0xf0
 8000aac:	dd03      	ble.n	8000ab6 <ILI9341_FillRectangle+0x3e>
 8000aae:	88fb      	ldrh	r3, [r7, #6]
 8000ab0:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000ab4:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8000ab6:	88ba      	ldrh	r2, [r7, #4]
 8000ab8:	883b      	ldrh	r3, [r7, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000ac0:	dd03      	ble.n	8000aca <ILI9341_FillRectangle+0x52>
 8000ac2:	88bb      	ldrh	r3, [r7, #4]
 8000ac4:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000ac8:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 8000aca:	f7ff fd2d 	bl	8000528 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000ace:	88fa      	ldrh	r2, [r7, #6]
 8000ad0:	887b      	ldrh	r3, [r7, #2]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	b29c      	uxth	r4, r3
 8000ada:	88ba      	ldrh	r2, [r7, #4]
 8000adc:	883b      	ldrh	r3, [r7, #0]
 8000ade:	4413      	add	r3, r2
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	88b9      	ldrh	r1, [r7, #4]
 8000ae8:	88f8      	ldrh	r0, [r7, #6]
 8000aea:	4622      	mov	r2, r4
 8000aec:	f7ff fd90 	bl	8000610 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000af0:	8c3b      	ldrh	r3, [r7, #32]
 8000af2:	0a1b      	lsrs	r3, r3, #8
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	733b      	strb	r3, [r7, #12]
 8000afa:	8c3b      	ldrh	r3, [r7, #32]
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	2101      	movs	r1, #1
 8000b04:	4811      	ldr	r0, [pc, #68]	@ (8000b4c <ILI9341_FillRectangle+0xd4>)
 8000b06:	f000 ff69 	bl	80019dc <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000b0a:	883b      	ldrh	r3, [r7, #0]
 8000b0c:	80bb      	strh	r3, [r7, #4]
 8000b0e:	e013      	b.n	8000b38 <ILI9341_FillRectangle+0xc0>
        for(x = w; x > 0; x--) {
 8000b10:	887b      	ldrh	r3, [r7, #2]
 8000b12:	80fb      	strh	r3, [r7, #6]
 8000b14:	e00a      	b.n	8000b2c <ILI9341_FillRectangle+0xb4>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000b16:	f107 010c 	add.w	r1, r7, #12
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b1e:	2202      	movs	r2, #2
 8000b20:	480b      	ldr	r0, [pc, #44]	@ (8000b50 <ILI9341_FillRectangle+0xd8>)
 8000b22:	f001 fc96 	bl	8002452 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000b26:	88fb      	ldrh	r3, [r7, #6]
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	80fb      	strh	r3, [r7, #6]
 8000b2c:	88fb      	ldrh	r3, [r7, #6]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d1f1      	bne.n	8000b16 <ILI9341_FillRectangle+0x9e>
    for(y = h; y > 0; y--) {
 8000b32:	88bb      	ldrh	r3, [r7, #4]
 8000b34:	3b01      	subs	r3, #1
 8000b36:	80bb      	strh	r3, [r7, #4]
 8000b38:	88bb      	ldrh	r3, [r7, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d1e8      	bne.n	8000b10 <ILI9341_FillRectangle+0x98>
        }
    }

    ILI9341_Unselect();
 8000b3e:	f7ff fcff 	bl	8000540 <ILI9341_Unselect>
 8000b42:	e000      	b.n	8000b46 <ILI9341_FillRectangle+0xce>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000b44:	bf00      	nop
}
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd90      	pop	{r4, r7, pc}
 8000b4c:	40020400 	.word	0x40020400
 8000b50:	20000030 	.word	0x20000030

08000b54 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af02      	add	r7, sp, #8
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8000b5e:	88fb      	ldrh	r3, [r7, #6]
 8000b60:	9300      	str	r3, [sp, #0]
 8000b62:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000b66:	22f0      	movs	r2, #240	@ 0xf0
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f7ff ff84 	bl	8000a78 <ILI9341_FillRectangle>
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b7e:	f000 fb6f 	bl	8001260 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b82:	f000 f885 	bl	8000c90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b86:	f000 f979 	bl	8000e7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b8a:	f000 f94d 	bl	8000e28 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000b8e:	f000 f8e9 	bl	8000d64 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000b92:	f000 f91f 	bl	8000dd4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // Initialize ILI9341 LCD and clear the screen
  ILI9341_Init();
 8000b96:	f7ff fd83 	bl	80006a0 <ILI9341_Init>
  ILI9341_FillScreen(ILI9341_BLACK);
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f7ff ffda 	bl	8000b54 <ILI9341_FillScreen>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	if (HAL_UART_Receive(&huart1, (uint8_t *)&rx_char, 1, HAL_MAX_DELAY) == HAL_OK)
 8000ba0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	4931      	ldr	r1, [pc, #196]	@ (8000c6c <main+0xf4>)
 8000ba8:	4831      	ldr	r0, [pc, #196]	@ (8000c70 <main+0xf8>)
 8000baa:	f001 fec3 	bl	8002934 <HAL_UART_Receive>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d1f5      	bne.n	8000ba0 <main+0x28>
	{
		if (rx_char == '\n')
 8000bb4:	4b2d      	ldr	r3, [pc, #180]	@ (8000c6c <main+0xf4>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b0a      	cmp	r3, #10
 8000bba:	d148      	bne.n	8000c4e <main+0xd6>
		{
			word_buffer[word_index] = '\0';
 8000bbc:	4b2d      	ldr	r3, [pc, #180]	@ (8000c74 <main+0xfc>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a2d      	ldr	r2, [pc, #180]	@ (8000c78 <main+0x100>)
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	54d1      	strb	r1, [r2, r3]
			word_index = 0;
 8000bc6:	4b2b      	ldr	r3, [pc, #172]	@ (8000c74 <main+0xfc>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]

			if (strcmp(word_buffer, "[FLUSH]") == 0)
 8000bcc:	492b      	ldr	r1, [pc, #172]	@ (8000c7c <main+0x104>)
 8000bce:	482a      	ldr	r0, [pc, #168]	@ (8000c78 <main+0x100>)
 8000bd0:	f7ff fb02 	bl	80001d8 <strcmp>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d117      	bne.n	8000c0a <main+0x92>
			{
				ILI9341_FillScreen(ILI9341_BLACK);
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f7ff ffba 	bl	8000b54 <ILI9341_FillScreen>
				ILI9341_WriteString(10, 10, display_line, Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8000be0:	4b27      	ldr	r3, [pc, #156]	@ (8000c80 <main+0x108>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	9202      	str	r2, [sp, #8]
 8000be6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bea:	9201      	str	r2, [sp, #4]
 8000bec:	685a      	ldr	r2, [r3, #4]
 8000bee:	9200      	str	r2, [sp, #0]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a24      	ldr	r2, [pc, #144]	@ (8000c84 <main+0x10c>)
 8000bf4:	210a      	movs	r1, #10
 8000bf6:	200a      	movs	r0, #10
 8000bf8:	f7ff fef2 	bl	80009e0 <ILI9341_WriteString>
				line_index = 0;
 8000bfc:	4b22      	ldr	r3, [pc, #136]	@ (8000c88 <main+0x110>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
				display_line[0] = '\0';  // reset buffer
 8000c02:	4b20      	ldr	r3, [pc, #128]	@ (8000c84 <main+0x10c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]
 8000c08:	e7ca      	b.n	8000ba0 <main+0x28>
			}
			else
			{
				if (line_index + strlen(word_buffer) + 1 < sizeof(display_line))
 8000c0a:	481b      	ldr	r0, [pc, #108]	@ (8000c78 <main+0x100>)
 8000c0c:	f7ff faee 	bl	80001ec <strlen>
 8000c10:	4603      	mov	r3, r0
 8000c12:	4a1d      	ldr	r2, [pc, #116]	@ (8000c88 <main+0x110>)
 8000c14:	6812      	ldr	r2, [r2, #0]
 8000c16:	4413      	add	r3, r2
 8000c18:	3301      	adds	r3, #1
 8000c1a:	2bff      	cmp	r3, #255	@ 0xff
 8000c1c:	d8c0      	bhi.n	8000ba0 <main+0x28>
				{
					strcat(display_line, word_buffer);
 8000c1e:	4916      	ldr	r1, [pc, #88]	@ (8000c78 <main+0x100>)
 8000c20:	4818      	ldr	r0, [pc, #96]	@ (8000c84 <main+0x10c>)
 8000c22:	f002 fe4d 	bl	80038c0 <strcat>
					strcat(display_line, " ");
 8000c26:	4817      	ldr	r0, [pc, #92]	@ (8000c84 <main+0x10c>)
 8000c28:	f7ff fae0 	bl	80001ec <strlen>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	461a      	mov	r2, r3
 8000c30:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <main+0x10c>)
 8000c32:	4413      	add	r3, r2
 8000c34:	4915      	ldr	r1, [pc, #84]	@ (8000c8c <main+0x114>)
 8000c36:	461a      	mov	r2, r3
 8000c38:	460b      	mov	r3, r1
 8000c3a:	881b      	ldrh	r3, [r3, #0]
 8000c3c:	8013      	strh	r3, [r2, #0]
					line_index = strlen(display_line);
 8000c3e:	4811      	ldr	r0, [pc, #68]	@ (8000c84 <main+0x10c>)
 8000c40:	f7ff fad4 	bl	80001ec <strlen>
 8000c44:	4603      	mov	r3, r0
 8000c46:	461a      	mov	r2, r3
 8000c48:	4b0f      	ldr	r3, [pc, #60]	@ (8000c88 <main+0x110>)
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	e7a8      	b.n	8000ba0 <main+0x28>
				}
			}
		}
		else if (word_index < sizeof(word_buffer) - 1)
 8000c4e:	4b09      	ldr	r3, [pc, #36]	@ (8000c74 <main+0xfc>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2b3e      	cmp	r3, #62	@ 0x3e
 8000c54:	d8a4      	bhi.n	8000ba0 <main+0x28>
		{
			word_buffer[word_index++] = rx_char;
 8000c56:	4b07      	ldr	r3, [pc, #28]	@ (8000c74 <main+0xfc>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	1c5a      	adds	r2, r3, #1
 8000c5c:	4905      	ldr	r1, [pc, #20]	@ (8000c74 <main+0xfc>)
 8000c5e:	600a      	str	r2, [r1, #0]
 8000c60:	4a02      	ldr	r2, [pc, #8]	@ (8000c6c <main+0xf4>)
 8000c62:	7811      	ldrb	r1, [r2, #0]
 8000c64:	4a04      	ldr	r2, [pc, #16]	@ (8000c78 <main+0x100>)
 8000c66:	54d1      	strb	r1, [r2, r3]
	if (HAL_UART_Receive(&huart1, (uint8_t *)&rx_char, 1, HAL_MAX_DELAY) == HAL_OK)
 8000c68:	e79a      	b.n	8000ba0 <main+0x28>
 8000c6a:	bf00      	nop
 8000c6c:	20000118 	.word	0x20000118
 8000c70:	20000088 	.word	0x20000088
 8000c74:	2000015c 	.word	0x2000015c
 8000c78:	2000011c 	.word	0x2000011c
 8000c7c:	08003974 	.word	0x08003974
 8000c80:	20000000 	.word	0x20000000
 8000c84:	20000160 	.word	0x20000160
 8000c88:	20000260 	.word	0x20000260
 8000c8c:	0800397c 	.word	0x0800397c

08000c90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b094      	sub	sp, #80	@ 0x50
 8000c94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c96:	f107 0320 	add.w	r3, r7, #32
 8000c9a:	2230      	movs	r2, #48	@ 0x30
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f002 fe06 	bl	80038b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca4:	f107 030c 	add.w	r3, r7, #12
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	4b28      	ldr	r3, [pc, #160]	@ (8000d5c <SystemClock_Config+0xcc>)
 8000cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cbc:	4a27      	ldr	r2, [pc, #156]	@ (8000d5c <SystemClock_Config+0xcc>)
 8000cbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cc4:	4b25      	ldr	r3, [pc, #148]	@ (8000d5c <SystemClock_Config+0xcc>)
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	4b22      	ldr	r3, [pc, #136]	@ (8000d60 <SystemClock_Config+0xd0>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a21      	ldr	r2, [pc, #132]	@ (8000d60 <SystemClock_Config+0xd0>)
 8000cda:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cde:	6013      	str	r3, [r2, #0]
 8000ce0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d60 <SystemClock_Config+0xd0>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cec:	2302      	movs	r3, #2
 8000cee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cf4:	2310      	movs	r3, #16
 8000cf6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000d00:	2310      	movs	r3, #16
 8000d02:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d04:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000d08:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d0a:	2304      	movs	r3, #4
 8000d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d0e:	2304      	movs	r3, #4
 8000d10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d12:	f107 0320 	add.w	r3, r7, #32
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 fe7a 	bl	8001a10 <HAL_RCC_OscConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d22:	f000 f92d 	bl	8000f80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d26:	230f      	movs	r3, #15
 8000d28:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d3c:	f107 030c 	add.w	r3, r7, #12
 8000d40:	2102      	movs	r1, #2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f001 f8dc 	bl	8001f00 <HAL_RCC_ClockConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d4e:	f000 f917 	bl	8000f80 <Error_Handler>
  }
}
 8000d52:	bf00      	nop
 8000d54:	3750      	adds	r7, #80	@ 0x50
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40007000 	.word	0x40007000

08000d64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d68:	4b18      	ldr	r3, [pc, #96]	@ (8000dcc <MX_SPI1_Init+0x68>)
 8000d6a:	4a19      	ldr	r2, [pc, #100]	@ (8000dd0 <MX_SPI1_Init+0x6c>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d6e:	4b17      	ldr	r3, [pc, #92]	@ (8000dcc <MX_SPI1_Init+0x68>)
 8000d70:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000d76:	4b15      	ldr	r3, [pc, #84]	@ (8000dcc <MX_SPI1_Init+0x68>)
 8000d78:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d7c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d7e:	4b13      	ldr	r3, [pc, #76]	@ (8000dcc <MX_SPI1_Init+0x68>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d84:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <MX_SPI1_Init+0x68>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d8a:	4b10      	ldr	r3, [pc, #64]	@ (8000dcc <MX_SPI1_Init+0x68>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d90:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <MX_SPI1_Init+0x68>)
 8000d92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d96:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d98:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <MX_SPI1_Init+0x68>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dcc <MX_SPI1_Init+0x68>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000da4:	4b09      	ldr	r3, [pc, #36]	@ (8000dcc <MX_SPI1_Init+0x68>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000daa:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <MX_SPI1_Init+0x68>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000db0:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <MX_SPI1_Init+0x68>)
 8000db2:	220a      	movs	r2, #10
 8000db4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000db6:	4805      	ldr	r0, [pc, #20]	@ (8000dcc <MX_SPI1_Init+0x68>)
 8000db8:	f001 fac2 	bl	8002340 <HAL_SPI_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000dc2:	f000 f8dd 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000030 	.word	0x20000030
 8000dd0:	40013000 	.word	0x40013000

08000dd4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	@ (8000e20 <MX_USART1_UART_Init+0x4c>)
 8000dda:	4a12      	ldr	r2, [pc, #72]	@ (8000e24 <MX_USART1_UART_Init+0x50>)
 8000ddc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dde:	4b10      	ldr	r3, [pc, #64]	@ (8000e20 <MX_USART1_UART_Init+0x4c>)
 8000de0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000de4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000de6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e20 <MX_USART1_UART_Init+0x4c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dec:	4b0c      	ldr	r3, [pc, #48]	@ (8000e20 <MX_USART1_UART_Init+0x4c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000df2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e20 <MX_USART1_UART_Init+0x4c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000df8:	4b09      	ldr	r3, [pc, #36]	@ (8000e20 <MX_USART1_UART_Init+0x4c>)
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dfe:	4b08      	ldr	r3, [pc, #32]	@ (8000e20 <MX_USART1_UART_Init+0x4c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e04:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <MX_USART1_UART_Init+0x4c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e0a:	4805      	ldr	r0, [pc, #20]	@ (8000e20 <MX_USART1_UART_Init+0x4c>)
 8000e0c:	f001 fd42 	bl	8002894 <HAL_UART_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e16:	f000 f8b3 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000088 	.word	0x20000088
 8000e24:	40011000 	.word	0x40011000

08000e28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <MX_USART2_UART_Init+0x4c>)
 8000e2e:	4a12      	ldr	r2, [pc, #72]	@ (8000e78 <MX_USART2_UART_Init+0x50>)
 8000e30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e32:	4b10      	ldr	r3, [pc, #64]	@ (8000e74 <MX_USART2_UART_Init+0x4c>)
 8000e34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e74 <MX_USART2_UART_Init+0x4c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e40:	4b0c      	ldr	r3, [pc, #48]	@ (8000e74 <MX_USART2_UART_Init+0x4c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e46:	4b0b      	ldr	r3, [pc, #44]	@ (8000e74 <MX_USART2_UART_Init+0x4c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e4c:	4b09      	ldr	r3, [pc, #36]	@ (8000e74 <MX_USART2_UART_Init+0x4c>)
 8000e4e:	220c      	movs	r2, #12
 8000e50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e52:	4b08      	ldr	r3, [pc, #32]	@ (8000e74 <MX_USART2_UART_Init+0x4c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e58:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <MX_USART2_UART_Init+0x4c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e5e:	4805      	ldr	r0, [pc, #20]	@ (8000e74 <MX_USART2_UART_Init+0x4c>)
 8000e60:	f001 fd18 	bl	8002894 <HAL_UART_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e6a:	f000 f889 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	200000d0 	.word	0x200000d0
 8000e78:	40004400 	.word	0x40004400

08000e7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	@ 0x28
 8000e80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
 8000e90:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	4b37      	ldr	r3, [pc, #220]	@ (8000f74 <MX_GPIO_Init+0xf8>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	4a36      	ldr	r2, [pc, #216]	@ (8000f74 <MX_GPIO_Init+0xf8>)
 8000e9c:	f043 0304 	orr.w	r3, r3, #4
 8000ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea2:	4b34      	ldr	r3, [pc, #208]	@ (8000f74 <MX_GPIO_Init+0xf8>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	f003 0304 	and.w	r3, r3, #4
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	4b30      	ldr	r3, [pc, #192]	@ (8000f74 <MX_GPIO_Init+0xf8>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	4a2f      	ldr	r2, [pc, #188]	@ (8000f74 <MX_GPIO_Init+0xf8>)
 8000eb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebe:	4b2d      	ldr	r3, [pc, #180]	@ (8000f74 <MX_GPIO_Init+0xf8>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	4b29      	ldr	r3, [pc, #164]	@ (8000f74 <MX_GPIO_Init+0xf8>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	4a28      	ldr	r2, [pc, #160]	@ (8000f74 <MX_GPIO_Init+0xf8>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eda:	4b26      	ldr	r3, [pc, #152]	@ (8000f74 <MX_GPIO_Init+0xf8>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	607b      	str	r3, [r7, #4]
 8000eea:	4b22      	ldr	r3, [pc, #136]	@ (8000f74 <MX_GPIO_Init+0xf8>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	4a21      	ldr	r2, [pc, #132]	@ (8000f74 <MX_GPIO_Init+0xf8>)
 8000ef0:	f043 0302 	orr.w	r3, r3, #2
 8000ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef6:	4b1f      	ldr	r3, [pc, #124]	@ (8000f74 <MX_GPIO_Init+0xf8>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2130      	movs	r1, #48	@ 0x30
 8000f06:	481c      	ldr	r0, [pc, #112]	@ (8000f78 <MX_GPIO_Init+0xfc>)
 8000f08:	f000 fd68 	bl	80019dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2103      	movs	r1, #3
 8000f10:	481a      	ldr	r0, [pc, #104]	@ (8000f7c <MX_GPIO_Init+0x100>)
 8000f12:	f000 fd63 	bl	80019dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f1c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4812      	ldr	r0, [pc, #72]	@ (8000f78 <MX_GPIO_Init+0xfc>)
 8000f2e:	f000 fbd1 	bl	80016d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000f32:	2330      	movs	r3, #48	@ 0x30
 8000f34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f36:	2301      	movs	r3, #1
 8000f38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	480b      	ldr	r0, [pc, #44]	@ (8000f78 <MX_GPIO_Init+0xfc>)
 8000f4a:	f000 fbc3 	bl	80016d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	4805      	ldr	r0, [pc, #20]	@ (8000f7c <MX_GPIO_Init+0x100>)
 8000f66:	f000 fbb5 	bl	80016d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f6a:	bf00      	nop
 8000f6c:	3728      	adds	r7, #40	@ 0x28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40020800 	.word	0x40020800
 8000f7c:	40020400 	.word	0x40020400

08000f80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f84:	b672      	cpsid	i
}
 8000f86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <Error_Handler+0x8>

08000f8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	4b10      	ldr	r3, [pc, #64]	@ (8000fd8 <HAL_MspInit+0x4c>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f9a:	4a0f      	ldr	r2, [pc, #60]	@ (8000fd8 <HAL_MspInit+0x4c>)
 8000f9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd8 <HAL_MspInit+0x4c>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	603b      	str	r3, [r7, #0]
 8000fb2:	4b09      	ldr	r3, [pc, #36]	@ (8000fd8 <HAL_MspInit+0x4c>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb6:	4a08      	ldr	r2, [pc, #32]	@ (8000fd8 <HAL_MspInit+0x4c>)
 8000fb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fbe:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <HAL_MspInit+0x4c>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fc6:	603b      	str	r3, [r7, #0]
 8000fc8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fca:	2007      	movs	r0, #7
 8000fcc:	f000 faae 	bl	800152c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40023800 	.word	0x40023800

08000fdc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	@ 0x28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a19      	ldr	r2, [pc, #100]	@ (8001060 <HAL_SPI_MspInit+0x84>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d12b      	bne.n	8001056 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	4b18      	ldr	r3, [pc, #96]	@ (8001064 <HAL_SPI_MspInit+0x88>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001006:	4a17      	ldr	r2, [pc, #92]	@ (8001064 <HAL_SPI_MspInit+0x88>)
 8001008:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800100c:	6453      	str	r3, [r2, #68]	@ 0x44
 800100e:	4b15      	ldr	r3, [pc, #84]	@ (8001064 <HAL_SPI_MspInit+0x88>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001012:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <HAL_SPI_MspInit+0x88>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	4a10      	ldr	r2, [pc, #64]	@ (8001064 <HAL_SPI_MspInit+0x88>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6313      	str	r3, [r2, #48]	@ 0x30
 800102a:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <HAL_SPI_MspInit+0x88>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001036:	23a0      	movs	r3, #160	@ 0xa0
 8001038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001042:	2303      	movs	r3, #3
 8001044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001046:	2305      	movs	r3, #5
 8001048:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	4805      	ldr	r0, [pc, #20]	@ (8001068 <HAL_SPI_MspInit+0x8c>)
 8001052:	f000 fb3f 	bl	80016d4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001056:	bf00      	nop
 8001058:	3728      	adds	r7, #40	@ 0x28
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40013000 	.word	0x40013000
 8001064:	40023800 	.word	0x40023800
 8001068:	40020000 	.word	0x40020000

0800106c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08c      	sub	sp, #48	@ 0x30
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a36      	ldr	r2, [pc, #216]	@ (8001164 <HAL_UART_MspInit+0xf8>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d135      	bne.n	80010fa <HAL_UART_MspInit+0x8e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
 8001092:	4b35      	ldr	r3, [pc, #212]	@ (8001168 <HAL_UART_MspInit+0xfc>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001096:	4a34      	ldr	r2, [pc, #208]	@ (8001168 <HAL_UART_MspInit+0xfc>)
 8001098:	f043 0310 	orr.w	r3, r3, #16
 800109c:	6453      	str	r3, [r2, #68]	@ 0x44
 800109e:	4b32      	ldr	r3, [pc, #200]	@ (8001168 <HAL_UART_MspInit+0xfc>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a2:	f003 0310 	and.w	r3, r3, #16
 80010a6:	61bb      	str	r3, [r7, #24]
 80010a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001168 <HAL_UART_MspInit+0xfc>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	4a2d      	ldr	r2, [pc, #180]	@ (8001168 <HAL_UART_MspInit+0xfc>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001168 <HAL_UART_MspInit+0xfc>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010c6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80010ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d4:	2303      	movs	r3, #3
 80010d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010d8:	2307      	movs	r3, #7
 80010da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010dc:	f107 031c 	add.w	r3, r7, #28
 80010e0:	4619      	mov	r1, r3
 80010e2:	4822      	ldr	r0, [pc, #136]	@ (800116c <HAL_UART_MspInit+0x100>)
 80010e4:	f000 faf6 	bl	80016d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2100      	movs	r1, #0
 80010ec:	2025      	movs	r0, #37	@ 0x25
 80010ee:	f000 fa28 	bl	8001542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010f2:	2025      	movs	r0, #37	@ 0x25
 80010f4:	f000 fa41 	bl	800157a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80010f8:	e030      	b.n	800115c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001170 <HAL_UART_MspInit+0x104>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d12b      	bne.n	800115c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001104:	2300      	movs	r3, #0
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	4b17      	ldr	r3, [pc, #92]	@ (8001168 <HAL_UART_MspInit+0xfc>)
 800110a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110c:	4a16      	ldr	r2, [pc, #88]	@ (8001168 <HAL_UART_MspInit+0xfc>)
 800110e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001112:	6413      	str	r3, [r2, #64]	@ 0x40
 8001114:	4b14      	ldr	r3, [pc, #80]	@ (8001168 <HAL_UART_MspInit+0xfc>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	4b10      	ldr	r3, [pc, #64]	@ (8001168 <HAL_UART_MspInit+0xfc>)
 8001126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001128:	4a0f      	ldr	r2, [pc, #60]	@ (8001168 <HAL_UART_MspInit+0xfc>)
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001130:	4b0d      	ldr	r3, [pc, #52]	@ (8001168 <HAL_UART_MspInit+0xfc>)
 8001132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800113c:	230c      	movs	r3, #12
 800113e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001148:	2303      	movs	r3, #3
 800114a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800114c:	2307      	movs	r3, #7
 800114e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	4619      	mov	r1, r3
 8001156:	4805      	ldr	r0, [pc, #20]	@ (800116c <HAL_UART_MspInit+0x100>)
 8001158:	f000 fabc 	bl	80016d4 <HAL_GPIO_Init>
}
 800115c:	bf00      	nop
 800115e:	3730      	adds	r7, #48	@ 0x30
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40011000 	.word	0x40011000
 8001168:	40023800 	.word	0x40023800
 800116c:	40020000 	.word	0x40020000
 8001170:	40004400 	.word	0x40004400

08001174 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <NMI_Handler+0x4>

0800117c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <HardFault_Handler+0x4>

08001184 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <MemManage_Handler+0x4>

0800118c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <BusFault_Handler+0x4>

08001194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <UsageFault_Handler+0x4>

0800119c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ca:	f000 f89b 	bl	8001304 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011d8:	4802      	ldr	r0, [pc, #8]	@ (80011e4 <USART1_IRQHandler+0x10>)
 80011da:	f001 fc43 	bl	8002a64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000088 	.word	0x20000088

080011e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011ec:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <SystemInit+0x20>)
 80011ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011f2:	4a05      	ldr	r2, [pc, #20]	@ (8001208 <SystemInit+0x20>)
 80011f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800120c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001244 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001210:	f7ff ffea 	bl	80011e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001214:	480c      	ldr	r0, [pc, #48]	@ (8001248 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001216:	490d      	ldr	r1, [pc, #52]	@ (800124c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001218:	4a0d      	ldr	r2, [pc, #52]	@ (8001250 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800121c:	e002      	b.n	8001224 <LoopCopyDataInit>

0800121e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001222:	3304      	adds	r3, #4

08001224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001228:	d3f9      	bcc.n	800121e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800122a:	4a0a      	ldr	r2, [pc, #40]	@ (8001254 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800122c:	4c0a      	ldr	r4, [pc, #40]	@ (8001258 <LoopFillZerobss+0x22>)
  movs r3, #0
 800122e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001230:	e001      	b.n	8001236 <LoopFillZerobss>

08001232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001234:	3204      	adds	r2, #4

08001236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001238:	d3fb      	bcc.n	8001232 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800123a:	f002 fb51 	bl	80038e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800123e:	f7ff fc9b 	bl	8000b78 <main>
  bx  lr    
 8001242:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001244:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800124c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001250:	08004704 	.word	0x08004704
  ldr r2, =_sbss
 8001254:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001258:	20000268 	.word	0x20000268

0800125c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800125c:	e7fe      	b.n	800125c <ADC_IRQHandler>
	...

08001260 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001264:	4b0e      	ldr	r3, [pc, #56]	@ (80012a0 <HAL_Init+0x40>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0d      	ldr	r2, [pc, #52]	@ (80012a0 <HAL_Init+0x40>)
 800126a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800126e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001270:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <HAL_Init+0x40>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0a      	ldr	r2, [pc, #40]	@ (80012a0 <HAL_Init+0x40>)
 8001276:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800127a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800127c:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <HAL_Init+0x40>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a07      	ldr	r2, [pc, #28]	@ (80012a0 <HAL_Init+0x40>)
 8001282:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001286:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001288:	2003      	movs	r0, #3
 800128a:	f000 f94f 	bl	800152c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800128e:	2000      	movs	r0, #0
 8001290:	f000 f808 	bl	80012a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001294:	f7ff fe7a 	bl	8000f8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40023c00 	.word	0x40023c00

080012a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012ac:	4b12      	ldr	r3, [pc, #72]	@ (80012f8 <HAL_InitTick+0x54>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4b12      	ldr	r3, [pc, #72]	@ (80012fc <HAL_InitTick+0x58>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	4619      	mov	r1, r3
 80012b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80012be:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 f967 	bl	8001596 <HAL_SYSTICK_Config>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e00e      	b.n	80012f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b0f      	cmp	r3, #15
 80012d6:	d80a      	bhi.n	80012ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d8:	2200      	movs	r2, #0
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012e0:	f000 f92f 	bl	8001542 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e4:	4a06      	ldr	r2, [pc, #24]	@ (8001300 <HAL_InitTick+0x5c>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
 80012ec:	e000      	b.n	80012f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000008 	.word	0x20000008
 80012fc:	20000010 	.word	0x20000010
 8001300:	2000000c 	.word	0x2000000c

08001304 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001308:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <HAL_IncTick+0x20>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	461a      	mov	r2, r3
 800130e:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <HAL_IncTick+0x24>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4413      	add	r3, r2
 8001314:	4a04      	ldr	r2, [pc, #16]	@ (8001328 <HAL_IncTick+0x24>)
 8001316:	6013      	str	r3, [r2, #0]
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20000010 	.word	0x20000010
 8001328:	20000264 	.word	0x20000264

0800132c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return uwTick;
 8001330:	4b03      	ldr	r3, [pc, #12]	@ (8001340 <HAL_GetTick+0x14>)
 8001332:	681b      	ldr	r3, [r3, #0]
}
 8001334:	4618      	mov	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20000264 	.word	0x20000264

08001344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800134c:	f7ff ffee 	bl	800132c <HAL_GetTick>
 8001350:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800135c:	d005      	beq.n	800136a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800135e:	4b0a      	ldr	r3, [pc, #40]	@ (8001388 <HAL_Delay+0x44>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4413      	add	r3, r2
 8001368:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800136a:	bf00      	nop
 800136c:	f7ff ffde 	bl	800132c <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	429a      	cmp	r2, r3
 800137a:	d8f7      	bhi.n	800136c <HAL_Delay+0x28>
  {
  }
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000010 	.word	0x20000010

0800138c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800139c:	4b0c      	ldr	r3, [pc, #48]	@ (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013a8:	4013      	ands	r3, r2
 80013aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013be:	4a04      	ldr	r2, [pc, #16]	@ (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	60d3      	str	r3, [r2, #12]
}
 80013c4:	bf00      	nop
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d8:	4b04      	ldr	r3, [pc, #16]	@ (80013ec <__NVIC_GetPriorityGrouping+0x18>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	f003 0307 	and.w	r3, r3, #7
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	db0b      	blt.n	800141a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	f003 021f 	and.w	r2, r3, #31
 8001408:	4907      	ldr	r1, [pc, #28]	@ (8001428 <__NVIC_EnableIRQ+0x38>)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	095b      	lsrs	r3, r3, #5
 8001410:	2001      	movs	r0, #1
 8001412:	fa00 f202 	lsl.w	r2, r0, r2
 8001416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000e100 	.word	0xe000e100

0800142c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	6039      	str	r1, [r7, #0]
 8001436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143c:	2b00      	cmp	r3, #0
 800143e:	db0a      	blt.n	8001456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	b2da      	uxtb	r2, r3
 8001444:	490c      	ldr	r1, [pc, #48]	@ (8001478 <__NVIC_SetPriority+0x4c>)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	0112      	lsls	r2, r2, #4
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	440b      	add	r3, r1
 8001450:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001454:	e00a      	b.n	800146c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4908      	ldr	r1, [pc, #32]	@ (800147c <__NVIC_SetPriority+0x50>)
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	f003 030f 	and.w	r3, r3, #15
 8001462:	3b04      	subs	r3, #4
 8001464:	0112      	lsls	r2, r2, #4
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	440b      	add	r3, r1
 800146a:	761a      	strb	r2, [r3, #24]
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000e100 	.word	0xe000e100
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001480:	b480      	push	{r7}
 8001482:	b089      	sub	sp, #36	@ 0x24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f1c3 0307 	rsb	r3, r3, #7
 800149a:	2b04      	cmp	r3, #4
 800149c:	bf28      	it	cs
 800149e:	2304      	movcs	r3, #4
 80014a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3304      	adds	r3, #4
 80014a6:	2b06      	cmp	r3, #6
 80014a8:	d902      	bls.n	80014b0 <NVIC_EncodePriority+0x30>
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3b03      	subs	r3, #3
 80014ae:	e000      	b.n	80014b2 <NVIC_EncodePriority+0x32>
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43da      	mvns	r2, r3
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	401a      	ands	r2, r3
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa01 f303 	lsl.w	r3, r1, r3
 80014d2:	43d9      	mvns	r1, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	4313      	orrs	r3, r2
         );
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3724      	adds	r7, #36	@ 0x24
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014f8:	d301      	bcc.n	80014fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fa:	2301      	movs	r3, #1
 80014fc:	e00f      	b.n	800151e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001528 <SysTick_Config+0x40>)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001506:	210f      	movs	r1, #15
 8001508:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800150c:	f7ff ff8e 	bl	800142c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001510:	4b05      	ldr	r3, [pc, #20]	@ (8001528 <SysTick_Config+0x40>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001516:	4b04      	ldr	r3, [pc, #16]	@ (8001528 <SysTick_Config+0x40>)
 8001518:	2207      	movs	r2, #7
 800151a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	e000e010 	.word	0xe000e010

0800152c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff ff29 	bl	800138c <__NVIC_SetPriorityGrouping>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001542:	b580      	push	{r7, lr}
 8001544:	b086      	sub	sp, #24
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001554:	f7ff ff3e 	bl	80013d4 <__NVIC_GetPriorityGrouping>
 8001558:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	6978      	ldr	r0, [r7, #20]
 8001560:	f7ff ff8e 	bl	8001480 <NVIC_EncodePriority>
 8001564:	4602      	mov	r2, r0
 8001566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156a:	4611      	mov	r1, r2
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff5d 	bl	800142c <__NVIC_SetPriority>
}
 8001572:	bf00      	nop
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	4603      	mov	r3, r0
 8001582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff31 	bl	80013f0 <__NVIC_EnableIRQ>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff ffa2 	bl	80014e8 <SysTick_Config>
 80015a4:	4603      	mov	r3, r0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b084      	sub	sp, #16
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015bc:	f7ff feb6 	bl	800132c <HAL_GetTick>
 80015c0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d008      	beq.n	80015e0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2280      	movs	r2, #128	@ 0x80
 80015d2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e052      	b.n	8001686 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 0216 	bic.w	r2, r2, #22
 80015ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	695a      	ldr	r2, [r3, #20]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80015fe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001604:	2b00      	cmp	r3, #0
 8001606:	d103      	bne.n	8001610 <HAL_DMA_Abort+0x62>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800160c:	2b00      	cmp	r3, #0
 800160e:	d007      	beq.n	8001620 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f022 0208 	bic.w	r2, r2, #8
 800161e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 0201 	bic.w	r2, r2, #1
 800162e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001630:	e013      	b.n	800165a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001632:	f7ff fe7b 	bl	800132c <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b05      	cmp	r3, #5
 800163e:	d90c      	bls.n	800165a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2220      	movs	r2, #32
 8001644:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2203      	movs	r2, #3
 800164a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e015      	b.n	8001686 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1e4      	bne.n	8001632 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800166c:	223f      	movs	r2, #63	@ 0x3f
 800166e:	409a      	lsls	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d004      	beq.n	80016ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2280      	movs	r2, #128	@ 0x80
 80016a6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e00c      	b.n	80016c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2205      	movs	r2, #5
 80016b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 0201 	bic.w	r2, r2, #1
 80016c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
	...

080016d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b089      	sub	sp, #36	@ 0x24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
 80016ee:	e159      	b.n	80019a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016f0:	2201      	movs	r2, #1
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	4013      	ands	r3, r2
 8001702:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	429a      	cmp	r2, r3
 800170a:	f040 8148 	bne.w	800199e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f003 0303 	and.w	r3, r3, #3
 8001716:	2b01      	cmp	r3, #1
 8001718:	d005      	beq.n	8001726 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001722:	2b02      	cmp	r3, #2
 8001724:	d130      	bne.n	8001788 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	2203      	movs	r2, #3
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43db      	mvns	r3, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4013      	ands	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	68da      	ldr	r2, [r3, #12]
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4313      	orrs	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800175c:	2201      	movs	r2, #1
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4013      	ands	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	091b      	lsrs	r3, r3, #4
 8001772:	f003 0201 	and.w	r2, r3, #1
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	2b03      	cmp	r3, #3
 8001792:	d017      	beq.n	80017c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	2203      	movs	r2, #3
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4013      	ands	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	689a      	ldr	r2, [r3, #8]
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 0303 	and.w	r3, r3, #3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d123      	bne.n	8001818 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	08da      	lsrs	r2, r3, #3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3208      	adds	r2, #8
 80017d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	f003 0307 	and.w	r3, r3, #7
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	220f      	movs	r2, #15
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	691a      	ldr	r2, [r3, #16]
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	08da      	lsrs	r2, r3, #3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3208      	adds	r2, #8
 8001812:	69b9      	ldr	r1, [r7, #24]
 8001814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	2203      	movs	r2, #3
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 0203 	and.w	r2, r3, #3
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001854:	2b00      	cmp	r3, #0
 8001856:	f000 80a2 	beq.w	800199e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	4b57      	ldr	r3, [pc, #348]	@ (80019bc <HAL_GPIO_Init+0x2e8>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001862:	4a56      	ldr	r2, [pc, #344]	@ (80019bc <HAL_GPIO_Init+0x2e8>)
 8001864:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001868:	6453      	str	r3, [r2, #68]	@ 0x44
 800186a:	4b54      	ldr	r3, [pc, #336]	@ (80019bc <HAL_GPIO_Init+0x2e8>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001876:	4a52      	ldr	r2, [pc, #328]	@ (80019c0 <HAL_GPIO_Init+0x2ec>)
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	089b      	lsrs	r3, r3, #2
 800187c:	3302      	adds	r3, #2
 800187e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001882:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	220f      	movs	r2, #15
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43db      	mvns	r3, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4013      	ands	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a49      	ldr	r2, [pc, #292]	@ (80019c4 <HAL_GPIO_Init+0x2f0>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d019      	beq.n	80018d6 <HAL_GPIO_Init+0x202>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a48      	ldr	r2, [pc, #288]	@ (80019c8 <HAL_GPIO_Init+0x2f4>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d013      	beq.n	80018d2 <HAL_GPIO_Init+0x1fe>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a47      	ldr	r2, [pc, #284]	@ (80019cc <HAL_GPIO_Init+0x2f8>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d00d      	beq.n	80018ce <HAL_GPIO_Init+0x1fa>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a46      	ldr	r2, [pc, #280]	@ (80019d0 <HAL_GPIO_Init+0x2fc>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d007      	beq.n	80018ca <HAL_GPIO_Init+0x1f6>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a45      	ldr	r2, [pc, #276]	@ (80019d4 <HAL_GPIO_Init+0x300>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d101      	bne.n	80018c6 <HAL_GPIO_Init+0x1f2>
 80018c2:	2304      	movs	r3, #4
 80018c4:	e008      	b.n	80018d8 <HAL_GPIO_Init+0x204>
 80018c6:	2307      	movs	r3, #7
 80018c8:	e006      	b.n	80018d8 <HAL_GPIO_Init+0x204>
 80018ca:	2303      	movs	r3, #3
 80018cc:	e004      	b.n	80018d8 <HAL_GPIO_Init+0x204>
 80018ce:	2302      	movs	r3, #2
 80018d0:	e002      	b.n	80018d8 <HAL_GPIO_Init+0x204>
 80018d2:	2301      	movs	r3, #1
 80018d4:	e000      	b.n	80018d8 <HAL_GPIO_Init+0x204>
 80018d6:	2300      	movs	r3, #0
 80018d8:	69fa      	ldr	r2, [r7, #28]
 80018da:	f002 0203 	and.w	r2, r2, #3
 80018de:	0092      	lsls	r2, r2, #2
 80018e0:	4093      	lsls	r3, r2
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018e8:	4935      	ldr	r1, [pc, #212]	@ (80019c0 <HAL_GPIO_Init+0x2ec>)
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	089b      	lsrs	r3, r3, #2
 80018ee:	3302      	adds	r3, #2
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018f6:	4b38      	ldr	r3, [pc, #224]	@ (80019d8 <HAL_GPIO_Init+0x304>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	43db      	mvns	r3, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4013      	ands	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800191a:	4a2f      	ldr	r2, [pc, #188]	@ (80019d8 <HAL_GPIO_Init+0x304>)
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001920:	4b2d      	ldr	r3, [pc, #180]	@ (80019d8 <HAL_GPIO_Init+0x304>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001944:	4a24      	ldr	r2, [pc, #144]	@ (80019d8 <HAL_GPIO_Init+0x304>)
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800194a:	4b23      	ldr	r3, [pc, #140]	@ (80019d8 <HAL_GPIO_Init+0x304>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	43db      	mvns	r3, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4013      	ands	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800196e:	4a1a      	ldr	r2, [pc, #104]	@ (80019d8 <HAL_GPIO_Init+0x304>)
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001974:	4b18      	ldr	r3, [pc, #96]	@ (80019d8 <HAL_GPIO_Init+0x304>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	4313      	orrs	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001998:	4a0f      	ldr	r2, [pc, #60]	@ (80019d8 <HAL_GPIO_Init+0x304>)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3301      	adds	r3, #1
 80019a2:	61fb      	str	r3, [r7, #28]
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	2b0f      	cmp	r3, #15
 80019a8:	f67f aea2 	bls.w	80016f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	3724      	adds	r7, #36	@ 0x24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40013800 	.word	0x40013800
 80019c4:	40020000 	.word	0x40020000
 80019c8:	40020400 	.word	0x40020400
 80019cc:	40020800 	.word	0x40020800
 80019d0:	40020c00 	.word	0x40020c00
 80019d4:	40021000 	.word	0x40021000
 80019d8:	40013c00 	.word	0x40013c00

080019dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	807b      	strh	r3, [r7, #2]
 80019e8:	4613      	mov	r3, r2
 80019ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019ec:	787b      	ldrb	r3, [r7, #1]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019f2:	887a      	ldrh	r2, [r7, #2]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019f8:	e003      	b.n	8001a02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019fa:	887b      	ldrh	r3, [r7, #2]
 80019fc:	041a      	lsls	r2, r3, #16
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	619a      	str	r2, [r3, #24]
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
	...

08001a10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e267      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d075      	beq.n	8001b1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001a2e:	4b88      	ldr	r3, [pc, #544]	@ (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 030c 	and.w	r3, r3, #12
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	d00c      	beq.n	8001a54 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a3a:	4b85      	ldr	r3, [pc, #532]	@ (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001a42:	2b08      	cmp	r3, #8
 8001a44:	d112      	bne.n	8001a6c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a46:	4b82      	ldr	r3, [pc, #520]	@ (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a52:	d10b      	bne.n	8001a6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	4b7e      	ldr	r3, [pc, #504]	@ (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d05b      	beq.n	8001b18 <HAL_RCC_OscConfig+0x108>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d157      	bne.n	8001b18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e242      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a74:	d106      	bne.n	8001a84 <HAL_RCC_OscConfig+0x74>
 8001a76:	4b76      	ldr	r3, [pc, #472]	@ (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a75      	ldr	r2, [pc, #468]	@ (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	e01d      	b.n	8001ac0 <HAL_RCC_OscConfig+0xb0>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a8c:	d10c      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x98>
 8001a8e:	4b70      	ldr	r3, [pc, #448]	@ (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a6f      	ldr	r2, [pc, #444]	@ (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001a94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	4b6d      	ldr	r3, [pc, #436]	@ (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a6c      	ldr	r2, [pc, #432]	@ (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001aa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	e00b      	b.n	8001ac0 <HAL_RCC_OscConfig+0xb0>
 8001aa8:	4b69      	ldr	r3, [pc, #420]	@ (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a68      	ldr	r2, [pc, #416]	@ (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001aae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	4b66      	ldr	r3, [pc, #408]	@ (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a65      	ldr	r2, [pc, #404]	@ (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001aba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d013      	beq.n	8001af0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fc30 	bl	800132c <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad0:	f7ff fc2c 	bl	800132c <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b64      	cmp	r3, #100	@ 0x64
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e207      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae2:	4b5b      	ldr	r3, [pc, #364]	@ (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0f0      	beq.n	8001ad0 <HAL_RCC_OscConfig+0xc0>
 8001aee:	e014      	b.n	8001b1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af0:	f7ff fc1c 	bl	800132c <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af8:	f7ff fc18 	bl	800132c <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b64      	cmp	r3, #100	@ 0x64
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e1f3      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b0a:	4b51      	ldr	r3, [pc, #324]	@ (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f0      	bne.n	8001af8 <HAL_RCC_OscConfig+0xe8>
 8001b16:	e000      	b.n	8001b1a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d063      	beq.n	8001bee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b26:	4b4a      	ldr	r3, [pc, #296]	@ (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00b      	beq.n	8001b4a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b32:	4b47      	ldr	r3, [pc, #284]	@ (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b3a:	2b08      	cmp	r3, #8
 8001b3c:	d11c      	bne.n	8001b78 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b3e:	4b44      	ldr	r3, [pc, #272]	@ (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d116      	bne.n	8001b78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b4a:	4b41      	ldr	r3, [pc, #260]	@ (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d005      	beq.n	8001b62 <HAL_RCC_OscConfig+0x152>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d001      	beq.n	8001b62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e1c7      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b62:	4b3b      	ldr	r3, [pc, #236]	@ (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	4937      	ldr	r1, [pc, #220]	@ (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b76:	e03a      	b.n	8001bee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d020      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b80:	4b34      	ldr	r3, [pc, #208]	@ (8001c54 <HAL_RCC_OscConfig+0x244>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b86:	f7ff fbd1 	bl	800132c <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b8e:	f7ff fbcd 	bl	800132c <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e1a8      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba0:	4b2b      	ldr	r3, [pc, #172]	@ (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0f0      	beq.n	8001b8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bac:	4b28      	ldr	r3, [pc, #160]	@ (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	4925      	ldr	r1, [pc, #148]	@ (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	600b      	str	r3, [r1, #0]
 8001bc0:	e015      	b.n	8001bee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bc2:	4b24      	ldr	r3, [pc, #144]	@ (8001c54 <HAL_RCC_OscConfig+0x244>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc8:	f7ff fbb0 	bl	800132c <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bd0:	f7ff fbac 	bl	800132c <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e187      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001be2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f0      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0308 	and.w	r3, r3, #8
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d036      	beq.n	8001c68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d016      	beq.n	8001c30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c02:	4b15      	ldr	r3, [pc, #84]	@ (8001c58 <HAL_RCC_OscConfig+0x248>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c08:	f7ff fb90 	bl	800132c <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c10:	f7ff fb8c 	bl	800132c <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e167      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c22:	4b0b      	ldr	r3, [pc, #44]	@ (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001c24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0f0      	beq.n	8001c10 <HAL_RCC_OscConfig+0x200>
 8001c2e:	e01b      	b.n	8001c68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c30:	4b09      	ldr	r3, [pc, #36]	@ (8001c58 <HAL_RCC_OscConfig+0x248>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c36:	f7ff fb79 	bl	800132c <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c3c:	e00e      	b.n	8001c5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c3e:	f7ff fb75 	bl	800132c <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d907      	bls.n	8001c5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e150      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
 8001c50:	40023800 	.word	0x40023800
 8001c54:	42470000 	.word	0x42470000
 8001c58:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c5c:	4b88      	ldr	r3, [pc, #544]	@ (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001c5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1ea      	bne.n	8001c3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 8097 	beq.w	8001da4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c76:	2300      	movs	r3, #0
 8001c78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c7a:	4b81      	ldr	r3, [pc, #516]	@ (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10f      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	4b7d      	ldr	r3, [pc, #500]	@ (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	4a7c      	ldr	r2, [pc, #496]	@ (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001c90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c96:	4b7a      	ldr	r3, [pc, #488]	@ (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca6:	4b77      	ldr	r3, [pc, #476]	@ (8001e84 <HAL_RCC_OscConfig+0x474>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d118      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cb2:	4b74      	ldr	r3, [pc, #464]	@ (8001e84 <HAL_RCC_OscConfig+0x474>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a73      	ldr	r2, [pc, #460]	@ (8001e84 <HAL_RCC_OscConfig+0x474>)
 8001cb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cbe:	f7ff fb35 	bl	800132c <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc6:	f7ff fb31 	bl	800132c <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e10c      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd8:	4b6a      	ldr	r3, [pc, #424]	@ (8001e84 <HAL_RCC_OscConfig+0x474>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0f0      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d106      	bne.n	8001cfa <HAL_RCC_OscConfig+0x2ea>
 8001cec:	4b64      	ldr	r3, [pc, #400]	@ (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001cee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cf0:	4a63      	ldr	r2, [pc, #396]	@ (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cf8:	e01c      	b.n	8001d34 <HAL_RCC_OscConfig+0x324>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2b05      	cmp	r3, #5
 8001d00:	d10c      	bne.n	8001d1c <HAL_RCC_OscConfig+0x30c>
 8001d02:	4b5f      	ldr	r3, [pc, #380]	@ (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d06:	4a5e      	ldr	r2, [pc, #376]	@ (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001d08:	f043 0304 	orr.w	r3, r3, #4
 8001d0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d0e:	4b5c      	ldr	r3, [pc, #368]	@ (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d12:	4a5b      	ldr	r2, [pc, #364]	@ (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d1a:	e00b      	b.n	8001d34 <HAL_RCC_OscConfig+0x324>
 8001d1c:	4b58      	ldr	r3, [pc, #352]	@ (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d20:	4a57      	ldr	r2, [pc, #348]	@ (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001d22:	f023 0301 	bic.w	r3, r3, #1
 8001d26:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d28:	4b55      	ldr	r3, [pc, #340]	@ (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d2c:	4a54      	ldr	r2, [pc, #336]	@ (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001d2e:	f023 0304 	bic.w	r3, r3, #4
 8001d32:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d015      	beq.n	8001d68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3c:	f7ff faf6 	bl	800132c <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d42:	e00a      	b.n	8001d5a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d44:	f7ff faf2 	bl	800132c <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e0cb      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5a:	4b49      	ldr	r3, [pc, #292]	@ (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0ee      	beq.n	8001d44 <HAL_RCC_OscConfig+0x334>
 8001d66:	e014      	b.n	8001d92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d68:	f7ff fae0 	bl	800132c <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d6e:	e00a      	b.n	8001d86 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d70:	f7ff fadc 	bl	800132c <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e0b5      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d86:	4b3e      	ldr	r3, [pc, #248]	@ (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1ee      	bne.n	8001d70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d92:	7dfb      	ldrb	r3, [r7, #23]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d105      	bne.n	8001da4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d98:	4b39      	ldr	r3, [pc, #228]	@ (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9c:	4a38      	ldr	r2, [pc, #224]	@ (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001d9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001da2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 80a1 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dae:	4b34      	ldr	r3, [pc, #208]	@ (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d05c      	beq.n	8001e74 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d141      	bne.n	8001e46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc2:	4b31      	ldr	r3, [pc, #196]	@ (8001e88 <HAL_RCC_OscConfig+0x478>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc8:	f7ff fab0 	bl	800132c <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd0:	f7ff faac 	bl	800132c <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e087      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de2:	4b27      	ldr	r3, [pc, #156]	@ (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69da      	ldr	r2, [r3, #28]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfc:	019b      	lsls	r3, r3, #6
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e04:	085b      	lsrs	r3, r3, #1
 8001e06:	3b01      	subs	r3, #1
 8001e08:	041b      	lsls	r3, r3, #16
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e10:	061b      	lsls	r3, r3, #24
 8001e12:	491b      	ldr	r1, [pc, #108]	@ (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e18:	4b1b      	ldr	r3, [pc, #108]	@ (8001e88 <HAL_RCC_OscConfig+0x478>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1e:	f7ff fa85 	bl	800132c <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e26:	f7ff fa81 	bl	800132c <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e05c      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e38:	4b11      	ldr	r3, [pc, #68]	@ (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0f0      	beq.n	8001e26 <HAL_RCC_OscConfig+0x416>
 8001e44:	e054      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e46:	4b10      	ldr	r3, [pc, #64]	@ (8001e88 <HAL_RCC_OscConfig+0x478>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4c:	f7ff fa6e 	bl	800132c <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e54:	f7ff fa6a 	bl	800132c <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e045      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e66:	4b06      	ldr	r3, [pc, #24]	@ (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x444>
 8001e72:	e03d      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d107      	bne.n	8001e8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e038      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40007000 	.word	0x40007000
 8001e88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001efc <HAL_RCC_OscConfig+0x4ec>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d028      	beq.n	8001eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d121      	bne.n	8001eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d11a      	bne.n	8001eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ec2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d111      	bne.n	8001eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed2:	085b      	lsrs	r3, r3, #1
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d107      	bne.n	8001eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d001      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e000      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40023800 	.word	0x40023800

08001f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0cc      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f14:	4b68      	ldr	r3, [pc, #416]	@ (80020b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d90c      	bls.n	8001f3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f22:	4b65      	ldr	r3, [pc, #404]	@ (80020b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2a:	4b63      	ldr	r3, [pc, #396]	@ (80020b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d001      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0b8      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d020      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f54:	4b59      	ldr	r3, [pc, #356]	@ (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	4a58      	ldr	r2, [pc, #352]	@ (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001f5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f6c:	4b53      	ldr	r3, [pc, #332]	@ (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	4a52      	ldr	r2, [pc, #328]	@ (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001f72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f78:	4b50      	ldr	r3, [pc, #320]	@ (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	494d      	ldr	r1, [pc, #308]	@ (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d044      	beq.n	8002020 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d107      	bne.n	8001fae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9e:	4b47      	ldr	r3, [pc, #284]	@ (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d119      	bne.n	8001fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e07f      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d003      	beq.n	8001fbe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	d107      	bne.n	8001fce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fbe:	4b3f      	ldr	r3, [pc, #252]	@ (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d109      	bne.n	8001fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e06f      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fce:	4b3b      	ldr	r3, [pc, #236]	@ (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e067      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fde:	4b37      	ldr	r3, [pc, #220]	@ (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f023 0203 	bic.w	r2, r3, #3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	4934      	ldr	r1, [pc, #208]	@ (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ff0:	f7ff f99c 	bl	800132c <HAL_GetTick>
 8001ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff6:	e00a      	b.n	800200e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff8:	f7ff f998 	bl	800132c <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002006:	4293      	cmp	r3, r2
 8002008:	d901      	bls.n	800200e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e04f      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200e:	4b2b      	ldr	r3, [pc, #172]	@ (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 020c 	and.w	r2, r3, #12
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	429a      	cmp	r2, r3
 800201e:	d1eb      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002020:	4b25      	ldr	r3, [pc, #148]	@ (80020b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	429a      	cmp	r2, r3
 800202c:	d20c      	bcs.n	8002048 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202e:	4b22      	ldr	r3, [pc, #136]	@ (80020b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002036:	4b20      	ldr	r3, [pc, #128]	@ (80020b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d001      	beq.n	8002048 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e032      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	d008      	beq.n	8002066 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002054:	4b19      	ldr	r3, [pc, #100]	@ (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	4916      	ldr	r1, [pc, #88]	@ (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	4313      	orrs	r3, r2
 8002064:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	2b00      	cmp	r3, #0
 8002070:	d009      	beq.n	8002086 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002072:	4b12      	ldr	r3, [pc, #72]	@ (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	490e      	ldr	r1, [pc, #56]	@ (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8002082:	4313      	orrs	r3, r2
 8002084:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002086:	f000 f821 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 800208a:	4602      	mov	r2, r0
 800208c:	4b0b      	ldr	r3, [pc, #44]	@ (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	091b      	lsrs	r3, r3, #4
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	490a      	ldr	r1, [pc, #40]	@ (80020c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002098:	5ccb      	ldrb	r3, [r1, r3]
 800209a:	fa22 f303 	lsr.w	r3, r2, r3
 800209e:	4a09      	ldr	r2, [pc, #36]	@ (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 80020a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80020a2:	4b09      	ldr	r3, [pc, #36]	@ (80020c8 <HAL_RCC_ClockConfig+0x1c8>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff f8fc 	bl	80012a4 <HAL_InitTick>

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40023c00 	.word	0x40023c00
 80020bc:	40023800 	.word	0x40023800
 80020c0:	080046dc 	.word	0x080046dc
 80020c4:	20000008 	.word	0x20000008
 80020c8:	2000000c 	.word	0x2000000c

080020cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020d0:	b094      	sub	sp, #80	@ 0x50
 80020d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80020d8:	2300      	movs	r3, #0
 80020da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80020dc:	2300      	movs	r3, #0
 80020de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80020e0:	2300      	movs	r3, #0
 80020e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020e4:	4b79      	ldr	r3, [pc, #484]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x200>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 030c 	and.w	r3, r3, #12
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d00d      	beq.n	800210c <HAL_RCC_GetSysClockFreq+0x40>
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	f200 80e1 	bhi.w	80022b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d002      	beq.n	8002100 <HAL_RCC_GetSysClockFreq+0x34>
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d003      	beq.n	8002106 <HAL_RCC_GetSysClockFreq+0x3a>
 80020fe:	e0db      	b.n	80022b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002100:	4b73      	ldr	r3, [pc, #460]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002102:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002104:	e0db      	b.n	80022be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002106:	4b73      	ldr	r3, [pc, #460]	@ (80022d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002108:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800210a:	e0d8      	b.n	80022be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800210c:	4b6f      	ldr	r3, [pc, #444]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x200>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002114:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002116:	4b6d      	ldr	r3, [pc, #436]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d063      	beq.n	80021ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002122:	4b6a      	ldr	r3, [pc, #424]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	099b      	lsrs	r3, r3, #6
 8002128:	2200      	movs	r2, #0
 800212a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800212c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800212e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002134:	633b      	str	r3, [r7, #48]	@ 0x30
 8002136:	2300      	movs	r3, #0
 8002138:	637b      	str	r3, [r7, #52]	@ 0x34
 800213a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800213e:	4622      	mov	r2, r4
 8002140:	462b      	mov	r3, r5
 8002142:	f04f 0000 	mov.w	r0, #0
 8002146:	f04f 0100 	mov.w	r1, #0
 800214a:	0159      	lsls	r1, r3, #5
 800214c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002150:	0150      	lsls	r0, r2, #5
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	4621      	mov	r1, r4
 8002158:	1a51      	subs	r1, r2, r1
 800215a:	6139      	str	r1, [r7, #16]
 800215c:	4629      	mov	r1, r5
 800215e:	eb63 0301 	sbc.w	r3, r3, r1
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	f04f 0300 	mov.w	r3, #0
 800216c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002170:	4659      	mov	r1, fp
 8002172:	018b      	lsls	r3, r1, #6
 8002174:	4651      	mov	r1, sl
 8002176:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800217a:	4651      	mov	r1, sl
 800217c:	018a      	lsls	r2, r1, #6
 800217e:	4651      	mov	r1, sl
 8002180:	ebb2 0801 	subs.w	r8, r2, r1
 8002184:	4659      	mov	r1, fp
 8002186:	eb63 0901 	sbc.w	r9, r3, r1
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	f04f 0300 	mov.w	r3, #0
 8002192:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002196:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800219a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800219e:	4690      	mov	r8, r2
 80021a0:	4699      	mov	r9, r3
 80021a2:	4623      	mov	r3, r4
 80021a4:	eb18 0303 	adds.w	r3, r8, r3
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	462b      	mov	r3, r5
 80021ac:	eb49 0303 	adc.w	r3, r9, r3
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80021be:	4629      	mov	r1, r5
 80021c0:	024b      	lsls	r3, r1, #9
 80021c2:	4621      	mov	r1, r4
 80021c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021c8:	4621      	mov	r1, r4
 80021ca:	024a      	lsls	r2, r1, #9
 80021cc:	4610      	mov	r0, r2
 80021ce:	4619      	mov	r1, r3
 80021d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021d2:	2200      	movs	r2, #0
 80021d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80021d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80021dc:	f7fe f80e 	bl	80001fc <__aeabi_uldivmod>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4613      	mov	r3, r2
 80021e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021e8:	e058      	b.n	800229c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ea:	4b38      	ldr	r3, [pc, #224]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x200>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	099b      	lsrs	r3, r3, #6
 80021f0:	2200      	movs	r2, #0
 80021f2:	4618      	mov	r0, r3
 80021f4:	4611      	mov	r1, r2
 80021f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021fa:	623b      	str	r3, [r7, #32]
 80021fc:	2300      	movs	r3, #0
 80021fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002200:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002204:	4642      	mov	r2, r8
 8002206:	464b      	mov	r3, r9
 8002208:	f04f 0000 	mov.w	r0, #0
 800220c:	f04f 0100 	mov.w	r1, #0
 8002210:	0159      	lsls	r1, r3, #5
 8002212:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002216:	0150      	lsls	r0, r2, #5
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4641      	mov	r1, r8
 800221e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002222:	4649      	mov	r1, r9
 8002224:	eb63 0b01 	sbc.w	fp, r3, r1
 8002228:	f04f 0200 	mov.w	r2, #0
 800222c:	f04f 0300 	mov.w	r3, #0
 8002230:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002234:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002238:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800223c:	ebb2 040a 	subs.w	r4, r2, sl
 8002240:	eb63 050b 	sbc.w	r5, r3, fp
 8002244:	f04f 0200 	mov.w	r2, #0
 8002248:	f04f 0300 	mov.w	r3, #0
 800224c:	00eb      	lsls	r3, r5, #3
 800224e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002252:	00e2      	lsls	r2, r4, #3
 8002254:	4614      	mov	r4, r2
 8002256:	461d      	mov	r5, r3
 8002258:	4643      	mov	r3, r8
 800225a:	18e3      	adds	r3, r4, r3
 800225c:	603b      	str	r3, [r7, #0]
 800225e:	464b      	mov	r3, r9
 8002260:	eb45 0303 	adc.w	r3, r5, r3
 8002264:	607b      	str	r3, [r7, #4]
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	f04f 0300 	mov.w	r3, #0
 800226e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002272:	4629      	mov	r1, r5
 8002274:	028b      	lsls	r3, r1, #10
 8002276:	4621      	mov	r1, r4
 8002278:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800227c:	4621      	mov	r1, r4
 800227e:	028a      	lsls	r2, r1, #10
 8002280:	4610      	mov	r0, r2
 8002282:	4619      	mov	r1, r3
 8002284:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002286:	2200      	movs	r2, #0
 8002288:	61bb      	str	r3, [r7, #24]
 800228a:	61fa      	str	r2, [r7, #28]
 800228c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002290:	f7fd ffb4 	bl	80001fc <__aeabi_uldivmod>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	4613      	mov	r3, r2
 800229a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800229c:	4b0b      	ldr	r3, [pc, #44]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x200>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	0c1b      	lsrs	r3, r3, #16
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	3301      	adds	r3, #1
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80022ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80022ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022b6:	e002      	b.n	80022be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022b8:	4b05      	ldr	r3, [pc, #20]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80022ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3750      	adds	r7, #80	@ 0x50
 80022c4:	46bd      	mov	sp, r7
 80022c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022ca:	bf00      	nop
 80022cc:	40023800 	.word	0x40023800
 80022d0:	00f42400 	.word	0x00f42400
 80022d4:	007a1200 	.word	0x007a1200

080022d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022dc:	4b03      	ldr	r3, [pc, #12]	@ (80022ec <HAL_RCC_GetHCLKFreq+0x14>)
 80022de:	681b      	ldr	r3, [r3, #0]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	20000008 	.word	0x20000008

080022f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022f4:	f7ff fff0 	bl	80022d8 <HAL_RCC_GetHCLKFreq>
 80022f8:	4602      	mov	r2, r0
 80022fa:	4b05      	ldr	r3, [pc, #20]	@ (8002310 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	0a9b      	lsrs	r3, r3, #10
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	4903      	ldr	r1, [pc, #12]	@ (8002314 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002306:	5ccb      	ldrb	r3, [r1, r3]
 8002308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800230c:	4618      	mov	r0, r3
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40023800 	.word	0x40023800
 8002314:	080046ec 	.word	0x080046ec

08002318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800231c:	f7ff ffdc 	bl	80022d8 <HAL_RCC_GetHCLKFreq>
 8002320:	4602      	mov	r2, r0
 8002322:	4b05      	ldr	r3, [pc, #20]	@ (8002338 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	0b5b      	lsrs	r3, r3, #13
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	4903      	ldr	r1, [pc, #12]	@ (800233c <HAL_RCC_GetPCLK2Freq+0x24>)
 800232e:	5ccb      	ldrb	r3, [r1, r3]
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002334:	4618      	mov	r0, r3
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40023800 	.word	0x40023800
 800233c:	080046ec 	.word	0x080046ec

08002340 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e07b      	b.n	800244a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002356:	2b00      	cmp	r3, #0
 8002358:	d108      	bne.n	800236c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002362:	d009      	beq.n	8002378 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	61da      	str	r2, [r3, #28]
 800236a:	e005      	b.n	8002378 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d106      	bne.n	8002398 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7fe fe22 	bl	8000fdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2202      	movs	r2, #2
 800239c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80023c0:	431a      	orrs	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023ca:	431a      	orrs	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	431a      	orrs	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023e8:	431a      	orrs	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023f2:	431a      	orrs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023fc:	ea42 0103 	orr.w	r1, r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002404:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	0c1b      	lsrs	r3, r3, #16
 8002416:	f003 0104 	and.w	r1, r3, #4
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241e:	f003 0210 	and.w	r2, r3, #16
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	69da      	ldr	r2, [r3, #28]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002438:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b088      	sub	sp, #32
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	603b      	str	r3, [r7, #0]
 800245e:	4613      	mov	r3, r2
 8002460:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002462:	f7fe ff63 	bl	800132c <HAL_GetTick>
 8002466:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002468:	88fb      	ldrh	r3, [r7, #6]
 800246a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b01      	cmp	r3, #1
 8002476:	d001      	beq.n	800247c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002478:	2302      	movs	r3, #2
 800247a:	e12a      	b.n	80026d2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <HAL_SPI_Transmit+0x36>
 8002482:	88fb      	ldrh	r3, [r7, #6]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e122      	b.n	80026d2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002492:	2b01      	cmp	r3, #1
 8002494:	d101      	bne.n	800249a <HAL_SPI_Transmit+0x48>
 8002496:	2302      	movs	r3, #2
 8002498:	e11b      	b.n	80026d2 <HAL_SPI_Transmit+0x280>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2203      	movs	r2, #3
 80024a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	88fa      	ldrh	r2, [r7, #6]
 80024ba:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	88fa      	ldrh	r2, [r7, #6]
 80024c0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024e8:	d10f      	bne.n	800250a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002508:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002514:	2b40      	cmp	r3, #64	@ 0x40
 8002516:	d007      	beq.n	8002528 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002526:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002530:	d152      	bne.n	80025d8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d002      	beq.n	8002540 <HAL_SPI_Transmit+0xee>
 800253a:	8b7b      	ldrh	r3, [r7, #26]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d145      	bne.n	80025cc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002544:	881a      	ldrh	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002550:	1c9a      	adds	r2, r3, #2
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800255a:	b29b      	uxth	r3, r3
 800255c:	3b01      	subs	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002564:	e032      	b.n	80025cc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b02      	cmp	r3, #2
 8002572:	d112      	bne.n	800259a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002578:	881a      	ldrh	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002584:	1c9a      	adds	r2, r3, #2
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800258e:	b29b      	uxth	r3, r3
 8002590:	3b01      	subs	r3, #1
 8002592:	b29a      	uxth	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002598:	e018      	b.n	80025cc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800259a:	f7fe fec7 	bl	800132c <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d803      	bhi.n	80025b2 <HAL_SPI_Transmit+0x160>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025b0:	d102      	bne.n	80025b8 <HAL_SPI_Transmit+0x166>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d109      	bne.n	80025cc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e082      	b.n	80026d2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1c7      	bne.n	8002566 <HAL_SPI_Transmit+0x114>
 80025d6:	e053      	b.n	8002680 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d002      	beq.n	80025e6 <HAL_SPI_Transmit+0x194>
 80025e0:	8b7b      	ldrh	r3, [r7, #26]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d147      	bne.n	8002676 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	330c      	adds	r3, #12
 80025f0:	7812      	ldrb	r2, [r2, #0]
 80025f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f8:	1c5a      	adds	r2, r3, #1
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002602:	b29b      	uxth	r3, r3
 8002604:	3b01      	subs	r3, #1
 8002606:	b29a      	uxth	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800260c:	e033      	b.n	8002676 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b02      	cmp	r3, #2
 800261a:	d113      	bne.n	8002644 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	330c      	adds	r3, #12
 8002626:	7812      	ldrb	r2, [r2, #0]
 8002628:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262e:	1c5a      	adds	r2, r3, #1
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002638:	b29b      	uxth	r3, r3
 800263a:	3b01      	subs	r3, #1
 800263c:	b29a      	uxth	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002642:	e018      	b.n	8002676 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002644:	f7fe fe72 	bl	800132c <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d803      	bhi.n	800265c <HAL_SPI_Transmit+0x20a>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800265a:	d102      	bne.n	8002662 <HAL_SPI_Transmit+0x210>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d109      	bne.n	8002676 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e02d      	b.n	80026d2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800267a:	b29b      	uxth	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1c6      	bne.n	800260e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002680:	69fa      	ldr	r2, [r7, #28]
 8002682:	6839      	ldr	r1, [r7, #0]
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f000 f8b1 	bl	80027ec <SPI_EndRxTxTransaction>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d002      	beq.n	8002696 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2220      	movs	r2, #32
 8002694:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10a      	bne.n	80026b4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e000      	b.n	80026d2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80026d0:	2300      	movs	r3, #0
  }
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3720      	adds	r7, #32
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b088      	sub	sp, #32
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	4613      	mov	r3, r2
 80026ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026ec:	f7fe fe1e 	bl	800132c <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026f4:	1a9b      	subs	r3, r3, r2
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	4413      	add	r3, r2
 80026fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80026fc:	f7fe fe16 	bl	800132c <HAL_GetTick>
 8002700:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002702:	4b39      	ldr	r3, [pc, #228]	@ (80027e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	015b      	lsls	r3, r3, #5
 8002708:	0d1b      	lsrs	r3, r3, #20
 800270a:	69fa      	ldr	r2, [r7, #28]
 800270c:	fb02 f303 	mul.w	r3, r2, r3
 8002710:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002712:	e054      	b.n	80027be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800271a:	d050      	beq.n	80027be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800271c:	f7fe fe06 	bl	800132c <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	69fa      	ldr	r2, [r7, #28]
 8002728:	429a      	cmp	r2, r3
 800272a:	d902      	bls.n	8002732 <SPI_WaitFlagStateUntilTimeout+0x56>
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d13d      	bne.n	80027ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002740:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800274a:	d111      	bne.n	8002770 <SPI_WaitFlagStateUntilTimeout+0x94>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002754:	d004      	beq.n	8002760 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800275e:	d107      	bne.n	8002770 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800276e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002774:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002778:	d10f      	bne.n	800279a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002798:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e017      	b.n	80027de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	3b01      	subs	r3, #1
 80027bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	4013      	ands	r3, r2
 80027c8:	68ba      	ldr	r2, [r7, #8]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	bf0c      	ite	eq
 80027ce:	2301      	moveq	r3, #1
 80027d0:	2300      	movne	r3, #0
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	461a      	mov	r2, r3
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d19b      	bne.n	8002714 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3720      	adds	r7, #32
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000008 	.word	0x20000008

080027ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af02      	add	r7, sp, #8
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2201      	movs	r2, #1
 8002800:	2102      	movs	r1, #2
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f7ff ff6a 	bl	80026dc <SPI_WaitFlagStateUntilTimeout>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d007      	beq.n	800281e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002812:	f043 0220 	orr.w	r2, r3, #32
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e032      	b.n	8002884 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800281e:	4b1b      	ldr	r3, [pc, #108]	@ (800288c <SPI_EndRxTxTransaction+0xa0>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a1b      	ldr	r2, [pc, #108]	@ (8002890 <SPI_EndRxTxTransaction+0xa4>)
 8002824:	fba2 2303 	umull	r2, r3, r2, r3
 8002828:	0d5b      	lsrs	r3, r3, #21
 800282a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800282e:	fb02 f303 	mul.w	r3, r2, r3
 8002832:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800283c:	d112      	bne.n	8002864 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2200      	movs	r2, #0
 8002846:	2180      	movs	r1, #128	@ 0x80
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f7ff ff47 	bl	80026dc <SPI_WaitFlagStateUntilTimeout>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d016      	beq.n	8002882 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002858:	f043 0220 	orr.w	r2, r3, #32
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e00f      	b.n	8002884 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00a      	beq.n	8002880 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	3b01      	subs	r3, #1
 800286e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800287a:	2b80      	cmp	r3, #128	@ 0x80
 800287c:	d0f2      	beq.n	8002864 <SPI_EndRxTxTransaction+0x78>
 800287e:	e000      	b.n	8002882 <SPI_EndRxTxTransaction+0x96>
        break;
 8002880:	bf00      	nop
  }

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	20000008 	.word	0x20000008
 8002890:	165e9f81 	.word	0x165e9f81

08002894 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e042      	b.n	800292c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d106      	bne.n	80028c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7fe fbd6 	bl	800106c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2224      	movs	r2, #36	@ 0x24
 80028c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80028d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 fd75 	bl	80033c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	691a      	ldr	r2, [r3, #16]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80028ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695a      	ldr	r2, [r3, #20]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80028fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68da      	ldr	r2, [r3, #12]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800290c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2220      	movs	r2, #32
 8002918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b08a      	sub	sp, #40	@ 0x28
 8002938:	af02      	add	r7, sp, #8
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	603b      	str	r3, [r7, #0]
 8002940:	4613      	mov	r3, r2
 8002942:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b20      	cmp	r3, #32
 8002952:	f040 8081 	bne.w	8002a58 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d002      	beq.n	8002962 <HAL_UART_Receive+0x2e>
 800295c:	88fb      	ldrh	r3, [r7, #6]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e079      	b.n	8002a5a <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2222      	movs	r2, #34	@ 0x22
 8002970:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800297a:	f7fe fcd7 	bl	800132c <HAL_GetTick>
 800297e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	88fa      	ldrh	r2, [r7, #6]
 8002984:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	88fa      	ldrh	r2, [r7, #6]
 800298a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002994:	d108      	bne.n	80029a8 <HAL_UART_Receive+0x74>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d104      	bne.n	80029a8 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	61bb      	str	r3, [r7, #24]
 80029a6:	e003      	b.n	80029b0 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80029b0:	e047      	b.n	8002a42 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2200      	movs	r2, #0
 80029ba:	2120      	movs	r1, #32
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 fb0d 	bl	8002fdc <UART_WaitOnFlagUntilTimeout>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2220      	movs	r2, #32
 80029cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e042      	b.n	8002a5a <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10c      	bne.n	80029f4 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	3302      	adds	r3, #2
 80029f0:	61bb      	str	r3, [r7, #24]
 80029f2:	e01f      	b.n	8002a34 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029fc:	d007      	beq.n	8002a0e <HAL_UART_Receive+0xda>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10a      	bne.n	8002a1c <HAL_UART_Receive+0xe8>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d106      	bne.n	8002a1c <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	701a      	strb	r2, [r3, #0]
 8002a1a:	e008      	b.n	8002a2e <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	3301      	adds	r3, #1
 8002a32:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1b2      	bne.n	80029b2 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	e000      	b.n	8002a5a <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002a58:	2302      	movs	r3, #2
  }
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3720      	adds	r7, #32
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b0ba      	sub	sp, #232	@ 0xe8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002aa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10f      	bne.n	8002aca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aae:	f003 0320 	and.w	r3, r3, #32
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d009      	beq.n	8002aca <HAL_UART_IRQHandler+0x66>
 8002ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002aba:	f003 0320 	and.w	r3, r3, #32
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 fbc2 	bl	800324c <UART_Receive_IT>
      return;
 8002ac8:	e25b      	b.n	8002f82 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002aca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 80de 	beq.w	8002c90 <HAL_UART_IRQHandler+0x22c>
 8002ad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d106      	bne.n	8002aee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ae4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 80d1 	beq.w	8002c90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00b      	beq.n	8002b12 <HAL_UART_IRQHandler+0xae>
 8002afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d005      	beq.n	8002b12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0a:	f043 0201 	orr.w	r2, r3, #1
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b16:	f003 0304 	and.w	r3, r3, #4
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00b      	beq.n	8002b36 <HAL_UART_IRQHandler+0xd2>
 8002b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d005      	beq.n	8002b36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2e:	f043 0202 	orr.w	r2, r3, #2
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00b      	beq.n	8002b5a <HAL_UART_IRQHandler+0xf6>
 8002b42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d005      	beq.n	8002b5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b52:	f043 0204 	orr.w	r2, r3, #4
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d011      	beq.n	8002b8a <HAL_UART_IRQHandler+0x126>
 8002b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b6a:	f003 0320 	and.w	r3, r3, #32
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d105      	bne.n	8002b7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d005      	beq.n	8002b8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b82:	f043 0208 	orr.w	r2, r3, #8
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 81f2 	beq.w	8002f78 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b98:	f003 0320 	and.w	r3, r3, #32
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <HAL_UART_IRQHandler+0x14e>
 8002ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ba4:	f003 0320 	and.w	r3, r3, #32
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d002      	beq.n	8002bb2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 fb4d 	bl	800324c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bbc:	2b40      	cmp	r3, #64	@ 0x40
 8002bbe:	bf0c      	ite	eq
 8002bc0:	2301      	moveq	r3, #1
 8002bc2:	2300      	movne	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d103      	bne.n	8002bde <HAL_UART_IRQHandler+0x17a>
 8002bd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d04f      	beq.n	8002c7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 fa55 	bl	800308e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bee:	2b40      	cmp	r3, #64	@ 0x40
 8002bf0:	d141      	bne.n	8002c76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	3314      	adds	r3, #20
 8002bf8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c00:	e853 3f00 	ldrex	r3, [r3]
 8002c04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002c08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	3314      	adds	r3, #20
 8002c1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002c1e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002c22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002c2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002c2e:	e841 2300 	strex	r3, r2, [r1]
 8002c32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002c36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1d9      	bne.n	8002bf2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d013      	beq.n	8002c6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c4a:	4a7e      	ldr	r2, [pc, #504]	@ (8002e44 <HAL_UART_IRQHandler+0x3e0>)
 8002c4c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fe fd1b 	bl	800168e <HAL_DMA_Abort_IT>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d016      	beq.n	8002c8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c68:	4610      	mov	r0, r2
 8002c6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c6c:	e00e      	b.n	8002c8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f99e 	bl	8002fb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c74:	e00a      	b.n	8002c8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f99a 	bl	8002fb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c7c:	e006      	b.n	8002c8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f996 	bl	8002fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002c8a:	e175      	b.n	8002f78 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c8c:	bf00      	nop
    return;
 8002c8e:	e173      	b.n	8002f78 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	f040 814f 	bne.w	8002f38 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c9e:	f003 0310 	and.w	r3, r3, #16
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 8148 	beq.w	8002f38 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cac:	f003 0310 	and.w	r3, r3, #16
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 8141 	beq.w	8002f38 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	60bb      	str	r3, [r7, #8]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cd6:	2b40      	cmp	r3, #64	@ 0x40
 8002cd8:	f040 80b6 	bne.w	8002e48 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ce8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 8145 	beq.w	8002f7c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002cf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	f080 813e 	bcs.w	8002f7c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d06:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d12:	f000 8088 	beq.w	8002e26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	330c      	adds	r3, #12
 8002d1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d24:	e853 3f00 	ldrex	r3, [r3]
 8002d28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002d2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	330c      	adds	r3, #12
 8002d3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002d42:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002d4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002d52:	e841 2300 	strex	r3, r2, [r1]
 8002d56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002d5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1d9      	bne.n	8002d16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	3314      	adds	r3, #20
 8002d68:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d6c:	e853 3f00 	ldrex	r3, [r3]
 8002d70:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002d72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d74:	f023 0301 	bic.w	r3, r3, #1
 8002d78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	3314      	adds	r3, #20
 8002d82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d86:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002d8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002d8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002d92:	e841 2300 	strex	r3, r2, [r1]
 8002d96:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002d98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1e1      	bne.n	8002d62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	3314      	adds	r3, #20
 8002da4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002da8:	e853 3f00 	ldrex	r3, [r3]
 8002dac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002dae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002db0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002db4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	3314      	adds	r3, #20
 8002dbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002dc2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002dc4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002dc8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002dca:	e841 2300 	strex	r3, r2, [r1]
 8002dce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002dd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1e3      	bne.n	8002d9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	330c      	adds	r3, #12
 8002dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002dee:	e853 3f00 	ldrex	r3, [r3]
 8002df2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002df4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002df6:	f023 0310 	bic.w	r3, r3, #16
 8002dfa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	330c      	adds	r3, #12
 8002e04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002e08:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002e0a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e10:	e841 2300 	strex	r3, r2, [r1]
 8002e14:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002e16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1e3      	bne.n	8002de4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7fe fbc4 	bl	80015ae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2202      	movs	r2, #2
 8002e2a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f8c1 	bl	8002fc4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e42:	e09b      	b.n	8002f7c <HAL_UART_IRQHandler+0x518>
 8002e44:	08003155 	.word	0x08003155
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 808e 	beq.w	8002f80 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002e64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 8089 	beq.w	8002f80 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	330c      	adds	r3, #12
 8002e74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e78:	e853 3f00 	ldrex	r3, [r3]
 8002e7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	330c      	adds	r3, #12
 8002e8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002e92:	647a      	str	r2, [r7, #68]	@ 0x44
 8002e94:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e96:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e9a:	e841 2300 	strex	r3, r2, [r1]
 8002e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002ea0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1e3      	bne.n	8002e6e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	3314      	adds	r3, #20
 8002eac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb0:	e853 3f00 	ldrex	r3, [r3]
 8002eb4:	623b      	str	r3, [r7, #32]
   return(result);
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	f023 0301 	bic.w	r3, r3, #1
 8002ebc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	3314      	adds	r3, #20
 8002ec6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002eca:	633a      	str	r2, [r7, #48]	@ 0x30
 8002ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ece:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ed0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ed2:	e841 2300 	strex	r3, r2, [r1]
 8002ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1e3      	bne.n	8002ea6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	330c      	adds	r3, #12
 8002ef2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	e853 3f00 	ldrex	r3, [r3]
 8002efa:	60fb      	str	r3, [r7, #12]
   return(result);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f023 0310 	bic.w	r3, r3, #16
 8002f02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	330c      	adds	r3, #12
 8002f0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002f10:	61fa      	str	r2, [r7, #28]
 8002f12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f14:	69b9      	ldr	r1, [r7, #24]
 8002f16:	69fa      	ldr	r2, [r7, #28]
 8002f18:	e841 2300 	strex	r3, r2, [r1]
 8002f1c:	617b      	str	r3, [r7, #20]
   return(result);
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1e3      	bne.n	8002eec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f2e:	4619      	mov	r1, r3
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f847 	bl	8002fc4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f36:	e023      	b.n	8002f80 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d009      	beq.n	8002f58 <HAL_UART_IRQHandler+0x4f4>
 8002f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 f913 	bl	800317c <UART_Transmit_IT>
    return;
 8002f56:	e014      	b.n	8002f82 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00e      	beq.n	8002f82 <HAL_UART_IRQHandler+0x51e>
 8002f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d008      	beq.n	8002f82 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f953 	bl	800321c <UART_EndTransmit_IT>
    return;
 8002f76:	e004      	b.n	8002f82 <HAL_UART_IRQHandler+0x51e>
    return;
 8002f78:	bf00      	nop
 8002f7a:	e002      	b.n	8002f82 <HAL_UART_IRQHandler+0x51e>
      return;
 8002f7c:	bf00      	nop
 8002f7e:	e000      	b.n	8002f82 <HAL_UART_IRQHandler+0x51e>
      return;
 8002f80:	bf00      	nop
  }
}
 8002f82:	37e8      	adds	r7, #232	@ 0xe8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	603b      	str	r3, [r7, #0]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fec:	e03b      	b.n	8003066 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fee:	6a3b      	ldr	r3, [r7, #32]
 8002ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ff4:	d037      	beq.n	8003066 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff6:	f7fe f999 	bl	800132c <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	6a3a      	ldr	r2, [r7, #32]
 8003002:	429a      	cmp	r2, r3
 8003004:	d302      	bcc.n	800300c <UART_WaitOnFlagUntilTimeout+0x30>
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e03a      	b.n	8003086 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	f003 0304 	and.w	r3, r3, #4
 800301a:	2b00      	cmp	r3, #0
 800301c:	d023      	beq.n	8003066 <UART_WaitOnFlagUntilTimeout+0x8a>
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	2b80      	cmp	r3, #128	@ 0x80
 8003022:	d020      	beq.n	8003066 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2b40      	cmp	r3, #64	@ 0x40
 8003028:	d01d      	beq.n	8003066 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	2b08      	cmp	r3, #8
 8003036:	d116      	bne.n	8003066 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	617b      	str	r3, [r7, #20]
 800304c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 f81d 	bl	800308e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2208      	movs	r2, #8
 8003058:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e00f      	b.n	8003086 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	4013      	ands	r3, r2
 8003070:	68ba      	ldr	r2, [r7, #8]
 8003072:	429a      	cmp	r2, r3
 8003074:	bf0c      	ite	eq
 8003076:	2301      	moveq	r3, #1
 8003078:	2300      	movne	r3, #0
 800307a:	b2db      	uxtb	r3, r3
 800307c:	461a      	mov	r2, r3
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	429a      	cmp	r2, r3
 8003082:	d0b4      	beq.n	8002fee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800308e:	b480      	push	{r7}
 8003090:	b095      	sub	sp, #84	@ 0x54
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	330c      	adds	r3, #12
 800309c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030a0:	e853 3f00 	ldrex	r3, [r3]
 80030a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80030a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80030ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	330c      	adds	r3, #12
 80030b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030b6:	643a      	str	r2, [r7, #64]	@ 0x40
 80030b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80030bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80030be:	e841 2300 	strex	r3, r2, [r1]
 80030c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80030c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1e5      	bne.n	8003096 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	3314      	adds	r3, #20
 80030d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	e853 3f00 	ldrex	r3, [r3]
 80030d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	f023 0301 	bic.w	r3, r3, #1
 80030e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3314      	adds	r3, #20
 80030e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030f2:	e841 2300 	strex	r3, r2, [r1]
 80030f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80030f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1e5      	bne.n	80030ca <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003102:	2b01      	cmp	r3, #1
 8003104:	d119      	bne.n	800313a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	330c      	adds	r3, #12
 800310c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	e853 3f00 	ldrex	r3, [r3]
 8003114:	60bb      	str	r3, [r7, #8]
   return(result);
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	f023 0310 	bic.w	r3, r3, #16
 800311c:	647b      	str	r3, [r7, #68]	@ 0x44
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	330c      	adds	r3, #12
 8003124:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003126:	61ba      	str	r2, [r7, #24]
 8003128:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312a:	6979      	ldr	r1, [r7, #20]
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	e841 2300 	strex	r3, r2, [r1]
 8003132:	613b      	str	r3, [r7, #16]
   return(result);
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1e5      	bne.n	8003106 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2220      	movs	r2, #32
 800313e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003148:	bf00      	nop
 800314a:	3754      	adds	r7, #84	@ 0x54
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003160:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f7ff ff1e 	bl	8002fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003174:	bf00      	nop
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b21      	cmp	r3, #33	@ 0x21
 800318e:	d13e      	bne.n	800320e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003198:	d114      	bne.n	80031c4 <UART_Transmit_IT+0x48>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d110      	bne.n	80031c4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	881b      	ldrh	r3, [r3, #0]
 80031ac:	461a      	mov	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031b6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	1c9a      	adds	r2, r3, #2
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	621a      	str	r2, [r3, #32]
 80031c2:	e008      	b.n	80031d6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	1c59      	adds	r1, r3, #1
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6211      	str	r1, [r2, #32]
 80031ce:	781a      	ldrb	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80031da:	b29b      	uxth	r3, r3
 80031dc:	3b01      	subs	r3, #1
 80031de:	b29b      	uxth	r3, r3
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	4619      	mov	r1, r3
 80031e4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10f      	bne.n	800320a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68da      	ldr	r2, [r3, #12]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031f8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003208:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	e000      	b.n	8003210 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800320e:	2302      	movs	r3, #2
  }
}
 8003210:	4618      	mov	r0, r3
 8003212:	3714      	adds	r7, #20
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003232:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f7ff fea3 	bl	8002f88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b08c      	sub	sp, #48	@ 0x30
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b22      	cmp	r3, #34	@ 0x22
 800325e:	f040 80ae 	bne.w	80033be <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800326a:	d117      	bne.n	800329c <UART_Receive_IT+0x50>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d113      	bne.n	800329c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003274:	2300      	movs	r3, #0
 8003276:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800327c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	b29b      	uxth	r3, r3
 8003286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800328a:	b29a      	uxth	r2, r3
 800328c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800328e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003294:	1c9a      	adds	r2, r3, #2
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	629a      	str	r2, [r3, #40]	@ 0x28
 800329a:	e026      	b.n	80032ea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032ae:	d007      	beq.n	80032c0 <UART_Receive_IT+0x74>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10a      	bne.n	80032ce <UART_Receive_IT+0x82>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d106      	bne.n	80032ce <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ca:	701a      	strb	r2, [r3, #0]
 80032cc:	e008      	b.n	80032e0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032de:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	3b01      	subs	r3, #1
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	4619      	mov	r1, r3
 80032f8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d15d      	bne.n	80033ba <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0220 	bic.w	r2, r2, #32
 800330c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800331c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695a      	ldr	r2, [r3, #20]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0201 	bic.w	r2, r2, #1
 800332c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2220      	movs	r2, #32
 8003332:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003340:	2b01      	cmp	r3, #1
 8003342:	d135      	bne.n	80033b0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	330c      	adds	r3, #12
 8003350:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	e853 3f00 	ldrex	r3, [r3]
 8003358:	613b      	str	r3, [r7, #16]
   return(result);
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	f023 0310 	bic.w	r3, r3, #16
 8003360:	627b      	str	r3, [r7, #36]	@ 0x24
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	330c      	adds	r3, #12
 8003368:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800336a:	623a      	str	r2, [r7, #32]
 800336c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336e:	69f9      	ldr	r1, [r7, #28]
 8003370:	6a3a      	ldr	r2, [r7, #32]
 8003372:	e841 2300 	strex	r3, r2, [r1]
 8003376:	61bb      	str	r3, [r7, #24]
   return(result);
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1e5      	bne.n	800334a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0310 	and.w	r3, r3, #16
 8003388:	2b10      	cmp	r3, #16
 800338a:	d10a      	bne.n	80033a2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800338c:	2300      	movs	r3, #0
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	60fb      	str	r3, [r7, #12]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80033a6:	4619      	mov	r1, r3
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7ff fe0b 	bl	8002fc4 <HAL_UARTEx_RxEventCallback>
 80033ae:	e002      	b.n	80033b6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f7ff fdf3 	bl	8002f9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80033b6:	2300      	movs	r3, #0
 80033b8:	e002      	b.n	80033c0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80033ba:	2300      	movs	r3, #0
 80033bc:	e000      	b.n	80033c0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80033be:	2302      	movs	r3, #2
  }
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3730      	adds	r7, #48	@ 0x30
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033cc:	b0c0      	sub	sp, #256	@ 0x100
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80033e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033e4:	68d9      	ldr	r1, [r3, #12]
 80033e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	ea40 0301 	orr.w	r3, r0, r1
 80033f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	431a      	orrs	r2, r3
 8003400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	431a      	orrs	r2, r3
 8003408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	4313      	orrs	r3, r2
 8003410:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003420:	f021 010c 	bic.w	r1, r1, #12
 8003424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800342e:	430b      	orrs	r3, r1
 8003430:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800343e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003442:	6999      	ldr	r1, [r3, #24]
 8003444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	ea40 0301 	orr.w	r3, r0, r1
 800344e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	4b8f      	ldr	r3, [pc, #572]	@ (8003694 <UART_SetConfig+0x2cc>)
 8003458:	429a      	cmp	r2, r3
 800345a:	d005      	beq.n	8003468 <UART_SetConfig+0xa0>
 800345c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	4b8d      	ldr	r3, [pc, #564]	@ (8003698 <UART_SetConfig+0x2d0>)
 8003464:	429a      	cmp	r2, r3
 8003466:	d104      	bne.n	8003472 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003468:	f7fe ff56 	bl	8002318 <HAL_RCC_GetPCLK2Freq>
 800346c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003470:	e003      	b.n	800347a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003472:	f7fe ff3d 	bl	80022f0 <HAL_RCC_GetPCLK1Freq>
 8003476:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800347a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003484:	f040 810c 	bne.w	80036a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003488:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800348c:	2200      	movs	r2, #0
 800348e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003492:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003496:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800349a:	4622      	mov	r2, r4
 800349c:	462b      	mov	r3, r5
 800349e:	1891      	adds	r1, r2, r2
 80034a0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80034a2:	415b      	adcs	r3, r3
 80034a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80034aa:	4621      	mov	r1, r4
 80034ac:	eb12 0801 	adds.w	r8, r2, r1
 80034b0:	4629      	mov	r1, r5
 80034b2:	eb43 0901 	adc.w	r9, r3, r1
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034ca:	4690      	mov	r8, r2
 80034cc:	4699      	mov	r9, r3
 80034ce:	4623      	mov	r3, r4
 80034d0:	eb18 0303 	adds.w	r3, r8, r3
 80034d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80034d8:	462b      	mov	r3, r5
 80034da:	eb49 0303 	adc.w	r3, r9, r3
 80034de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80034e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80034ee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80034f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80034f6:	460b      	mov	r3, r1
 80034f8:	18db      	adds	r3, r3, r3
 80034fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80034fc:	4613      	mov	r3, r2
 80034fe:	eb42 0303 	adc.w	r3, r2, r3
 8003502:	657b      	str	r3, [r7, #84]	@ 0x54
 8003504:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003508:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800350c:	f7fc fe76 	bl	80001fc <__aeabi_uldivmod>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4b61      	ldr	r3, [pc, #388]	@ (800369c <UART_SetConfig+0x2d4>)
 8003516:	fba3 2302 	umull	r2, r3, r3, r2
 800351a:	095b      	lsrs	r3, r3, #5
 800351c:	011c      	lsls	r4, r3, #4
 800351e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003522:	2200      	movs	r2, #0
 8003524:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003528:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800352c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003530:	4642      	mov	r2, r8
 8003532:	464b      	mov	r3, r9
 8003534:	1891      	adds	r1, r2, r2
 8003536:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003538:	415b      	adcs	r3, r3
 800353a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800353c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003540:	4641      	mov	r1, r8
 8003542:	eb12 0a01 	adds.w	sl, r2, r1
 8003546:	4649      	mov	r1, r9
 8003548:	eb43 0b01 	adc.w	fp, r3, r1
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003558:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800355c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003560:	4692      	mov	sl, r2
 8003562:	469b      	mov	fp, r3
 8003564:	4643      	mov	r3, r8
 8003566:	eb1a 0303 	adds.w	r3, sl, r3
 800356a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800356e:	464b      	mov	r3, r9
 8003570:	eb4b 0303 	adc.w	r3, fp, r3
 8003574:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003584:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003588:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800358c:	460b      	mov	r3, r1
 800358e:	18db      	adds	r3, r3, r3
 8003590:	643b      	str	r3, [r7, #64]	@ 0x40
 8003592:	4613      	mov	r3, r2
 8003594:	eb42 0303 	adc.w	r3, r2, r3
 8003598:	647b      	str	r3, [r7, #68]	@ 0x44
 800359a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800359e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80035a2:	f7fc fe2b 	bl	80001fc <__aeabi_uldivmod>
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	4611      	mov	r1, r2
 80035ac:	4b3b      	ldr	r3, [pc, #236]	@ (800369c <UART_SetConfig+0x2d4>)
 80035ae:	fba3 2301 	umull	r2, r3, r3, r1
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	2264      	movs	r2, #100	@ 0x64
 80035b6:	fb02 f303 	mul.w	r3, r2, r3
 80035ba:	1acb      	subs	r3, r1, r3
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80035c2:	4b36      	ldr	r3, [pc, #216]	@ (800369c <UART_SetConfig+0x2d4>)
 80035c4:	fba3 2302 	umull	r2, r3, r3, r2
 80035c8:	095b      	lsrs	r3, r3, #5
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80035d0:	441c      	add	r4, r3
 80035d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035d6:	2200      	movs	r2, #0
 80035d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80035e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80035e4:	4642      	mov	r2, r8
 80035e6:	464b      	mov	r3, r9
 80035e8:	1891      	adds	r1, r2, r2
 80035ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80035ec:	415b      	adcs	r3, r3
 80035ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80035f4:	4641      	mov	r1, r8
 80035f6:	1851      	adds	r1, r2, r1
 80035f8:	6339      	str	r1, [r7, #48]	@ 0x30
 80035fa:	4649      	mov	r1, r9
 80035fc:	414b      	adcs	r3, r1
 80035fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800360c:	4659      	mov	r1, fp
 800360e:	00cb      	lsls	r3, r1, #3
 8003610:	4651      	mov	r1, sl
 8003612:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003616:	4651      	mov	r1, sl
 8003618:	00ca      	lsls	r2, r1, #3
 800361a:	4610      	mov	r0, r2
 800361c:	4619      	mov	r1, r3
 800361e:	4603      	mov	r3, r0
 8003620:	4642      	mov	r2, r8
 8003622:	189b      	adds	r3, r3, r2
 8003624:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003628:	464b      	mov	r3, r9
 800362a:	460a      	mov	r2, r1
 800362c:	eb42 0303 	adc.w	r3, r2, r3
 8003630:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003640:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003644:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003648:	460b      	mov	r3, r1
 800364a:	18db      	adds	r3, r3, r3
 800364c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800364e:	4613      	mov	r3, r2
 8003650:	eb42 0303 	adc.w	r3, r2, r3
 8003654:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003656:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800365a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800365e:	f7fc fdcd 	bl	80001fc <__aeabi_uldivmod>
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	4b0d      	ldr	r3, [pc, #52]	@ (800369c <UART_SetConfig+0x2d4>)
 8003668:	fba3 1302 	umull	r1, r3, r3, r2
 800366c:	095b      	lsrs	r3, r3, #5
 800366e:	2164      	movs	r1, #100	@ 0x64
 8003670:	fb01 f303 	mul.w	r3, r1, r3
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	3332      	adds	r3, #50	@ 0x32
 800367a:	4a08      	ldr	r2, [pc, #32]	@ (800369c <UART_SetConfig+0x2d4>)
 800367c:	fba2 2303 	umull	r2, r3, r2, r3
 8003680:	095b      	lsrs	r3, r3, #5
 8003682:	f003 0207 	and.w	r2, r3, #7
 8003686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4422      	add	r2, r4
 800368e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003690:	e106      	b.n	80038a0 <UART_SetConfig+0x4d8>
 8003692:	bf00      	nop
 8003694:	40011000 	.word	0x40011000
 8003698:	40011400 	.word	0x40011400
 800369c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036a4:	2200      	movs	r2, #0
 80036a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80036aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80036ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80036b2:	4642      	mov	r2, r8
 80036b4:	464b      	mov	r3, r9
 80036b6:	1891      	adds	r1, r2, r2
 80036b8:	6239      	str	r1, [r7, #32]
 80036ba:	415b      	adcs	r3, r3
 80036bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80036be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036c2:	4641      	mov	r1, r8
 80036c4:	1854      	adds	r4, r2, r1
 80036c6:	4649      	mov	r1, r9
 80036c8:	eb43 0501 	adc.w	r5, r3, r1
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	00eb      	lsls	r3, r5, #3
 80036d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036da:	00e2      	lsls	r2, r4, #3
 80036dc:	4614      	mov	r4, r2
 80036de:	461d      	mov	r5, r3
 80036e0:	4643      	mov	r3, r8
 80036e2:	18e3      	adds	r3, r4, r3
 80036e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80036e8:	464b      	mov	r3, r9
 80036ea:	eb45 0303 	adc.w	r3, r5, r3
 80036ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80036f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80036fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003702:	f04f 0200 	mov.w	r2, #0
 8003706:	f04f 0300 	mov.w	r3, #0
 800370a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800370e:	4629      	mov	r1, r5
 8003710:	008b      	lsls	r3, r1, #2
 8003712:	4621      	mov	r1, r4
 8003714:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003718:	4621      	mov	r1, r4
 800371a:	008a      	lsls	r2, r1, #2
 800371c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003720:	f7fc fd6c 	bl	80001fc <__aeabi_uldivmod>
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	4b60      	ldr	r3, [pc, #384]	@ (80038ac <UART_SetConfig+0x4e4>)
 800372a:	fba3 2302 	umull	r2, r3, r3, r2
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	011c      	lsls	r4, r3, #4
 8003732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003736:	2200      	movs	r2, #0
 8003738:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800373c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003740:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003744:	4642      	mov	r2, r8
 8003746:	464b      	mov	r3, r9
 8003748:	1891      	adds	r1, r2, r2
 800374a:	61b9      	str	r1, [r7, #24]
 800374c:	415b      	adcs	r3, r3
 800374e:	61fb      	str	r3, [r7, #28]
 8003750:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003754:	4641      	mov	r1, r8
 8003756:	1851      	adds	r1, r2, r1
 8003758:	6139      	str	r1, [r7, #16]
 800375a:	4649      	mov	r1, r9
 800375c:	414b      	adcs	r3, r1
 800375e:	617b      	str	r3, [r7, #20]
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800376c:	4659      	mov	r1, fp
 800376e:	00cb      	lsls	r3, r1, #3
 8003770:	4651      	mov	r1, sl
 8003772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003776:	4651      	mov	r1, sl
 8003778:	00ca      	lsls	r2, r1, #3
 800377a:	4610      	mov	r0, r2
 800377c:	4619      	mov	r1, r3
 800377e:	4603      	mov	r3, r0
 8003780:	4642      	mov	r2, r8
 8003782:	189b      	adds	r3, r3, r2
 8003784:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003788:	464b      	mov	r3, r9
 800378a:	460a      	mov	r2, r1
 800378c:	eb42 0303 	adc.w	r3, r2, r3
 8003790:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800379e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80037a0:	f04f 0200 	mov.w	r2, #0
 80037a4:	f04f 0300 	mov.w	r3, #0
 80037a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80037ac:	4649      	mov	r1, r9
 80037ae:	008b      	lsls	r3, r1, #2
 80037b0:	4641      	mov	r1, r8
 80037b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037b6:	4641      	mov	r1, r8
 80037b8:	008a      	lsls	r2, r1, #2
 80037ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80037be:	f7fc fd1d 	bl	80001fc <__aeabi_uldivmod>
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	4611      	mov	r1, r2
 80037c8:	4b38      	ldr	r3, [pc, #224]	@ (80038ac <UART_SetConfig+0x4e4>)
 80037ca:	fba3 2301 	umull	r2, r3, r3, r1
 80037ce:	095b      	lsrs	r3, r3, #5
 80037d0:	2264      	movs	r2, #100	@ 0x64
 80037d2:	fb02 f303 	mul.w	r3, r2, r3
 80037d6:	1acb      	subs	r3, r1, r3
 80037d8:	011b      	lsls	r3, r3, #4
 80037da:	3332      	adds	r3, #50	@ 0x32
 80037dc:	4a33      	ldr	r2, [pc, #204]	@ (80038ac <UART_SetConfig+0x4e4>)
 80037de:	fba2 2303 	umull	r2, r3, r2, r3
 80037e2:	095b      	lsrs	r3, r3, #5
 80037e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037e8:	441c      	add	r4, r3
 80037ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037ee:	2200      	movs	r2, #0
 80037f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80037f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80037f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80037f8:	4642      	mov	r2, r8
 80037fa:	464b      	mov	r3, r9
 80037fc:	1891      	adds	r1, r2, r2
 80037fe:	60b9      	str	r1, [r7, #8]
 8003800:	415b      	adcs	r3, r3
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003808:	4641      	mov	r1, r8
 800380a:	1851      	adds	r1, r2, r1
 800380c:	6039      	str	r1, [r7, #0]
 800380e:	4649      	mov	r1, r9
 8003810:	414b      	adcs	r3, r1
 8003812:	607b      	str	r3, [r7, #4]
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	f04f 0300 	mov.w	r3, #0
 800381c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003820:	4659      	mov	r1, fp
 8003822:	00cb      	lsls	r3, r1, #3
 8003824:	4651      	mov	r1, sl
 8003826:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800382a:	4651      	mov	r1, sl
 800382c:	00ca      	lsls	r2, r1, #3
 800382e:	4610      	mov	r0, r2
 8003830:	4619      	mov	r1, r3
 8003832:	4603      	mov	r3, r0
 8003834:	4642      	mov	r2, r8
 8003836:	189b      	adds	r3, r3, r2
 8003838:	66bb      	str	r3, [r7, #104]	@ 0x68
 800383a:	464b      	mov	r3, r9
 800383c:	460a      	mov	r2, r1
 800383e:	eb42 0303 	adc.w	r3, r2, r3
 8003842:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	663b      	str	r3, [r7, #96]	@ 0x60
 800384e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	f04f 0300 	mov.w	r3, #0
 8003858:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800385c:	4649      	mov	r1, r9
 800385e:	008b      	lsls	r3, r1, #2
 8003860:	4641      	mov	r1, r8
 8003862:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003866:	4641      	mov	r1, r8
 8003868:	008a      	lsls	r2, r1, #2
 800386a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800386e:	f7fc fcc5 	bl	80001fc <__aeabi_uldivmod>
 8003872:	4602      	mov	r2, r0
 8003874:	460b      	mov	r3, r1
 8003876:	4b0d      	ldr	r3, [pc, #52]	@ (80038ac <UART_SetConfig+0x4e4>)
 8003878:	fba3 1302 	umull	r1, r3, r3, r2
 800387c:	095b      	lsrs	r3, r3, #5
 800387e:	2164      	movs	r1, #100	@ 0x64
 8003880:	fb01 f303 	mul.w	r3, r1, r3
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	3332      	adds	r3, #50	@ 0x32
 800388a:	4a08      	ldr	r2, [pc, #32]	@ (80038ac <UART_SetConfig+0x4e4>)
 800388c:	fba2 2303 	umull	r2, r3, r2, r3
 8003890:	095b      	lsrs	r3, r3, #5
 8003892:	f003 020f 	and.w	r2, r3, #15
 8003896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4422      	add	r2, r4
 800389e:	609a      	str	r2, [r3, #8]
}
 80038a0:	bf00      	nop
 80038a2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80038a6:	46bd      	mov	sp, r7
 80038a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ac:	51eb851f 	.word	0x51eb851f

080038b0 <memset>:
 80038b0:	4402      	add	r2, r0
 80038b2:	4603      	mov	r3, r0
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d100      	bne.n	80038ba <memset+0xa>
 80038b8:	4770      	bx	lr
 80038ba:	f803 1b01 	strb.w	r1, [r3], #1
 80038be:	e7f9      	b.n	80038b4 <memset+0x4>

080038c0 <strcat>:
 80038c0:	b510      	push	{r4, lr}
 80038c2:	4602      	mov	r2, r0
 80038c4:	7814      	ldrb	r4, [r2, #0]
 80038c6:	4613      	mov	r3, r2
 80038c8:	3201      	adds	r2, #1
 80038ca:	2c00      	cmp	r4, #0
 80038cc:	d1fa      	bne.n	80038c4 <strcat+0x4>
 80038ce:	3b01      	subs	r3, #1
 80038d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80038d8:	2a00      	cmp	r2, #0
 80038da:	d1f9      	bne.n	80038d0 <strcat+0x10>
 80038dc:	bd10      	pop	{r4, pc}
	...

080038e0 <__libc_init_array>:
 80038e0:	b570      	push	{r4, r5, r6, lr}
 80038e2:	4d0d      	ldr	r5, [pc, #52]	@ (8003918 <__libc_init_array+0x38>)
 80038e4:	4c0d      	ldr	r4, [pc, #52]	@ (800391c <__libc_init_array+0x3c>)
 80038e6:	1b64      	subs	r4, r4, r5
 80038e8:	10a4      	asrs	r4, r4, #2
 80038ea:	2600      	movs	r6, #0
 80038ec:	42a6      	cmp	r6, r4
 80038ee:	d109      	bne.n	8003904 <__libc_init_array+0x24>
 80038f0:	4d0b      	ldr	r5, [pc, #44]	@ (8003920 <__libc_init_array+0x40>)
 80038f2:	4c0c      	ldr	r4, [pc, #48]	@ (8003924 <__libc_init_array+0x44>)
 80038f4:	f000 f818 	bl	8003928 <_init>
 80038f8:	1b64      	subs	r4, r4, r5
 80038fa:	10a4      	asrs	r4, r4, #2
 80038fc:	2600      	movs	r6, #0
 80038fe:	42a6      	cmp	r6, r4
 8003900:	d105      	bne.n	800390e <__libc_init_array+0x2e>
 8003902:	bd70      	pop	{r4, r5, r6, pc}
 8003904:	f855 3b04 	ldr.w	r3, [r5], #4
 8003908:	4798      	blx	r3
 800390a:	3601      	adds	r6, #1
 800390c:	e7ee      	b.n	80038ec <__libc_init_array+0xc>
 800390e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003912:	4798      	blx	r3
 8003914:	3601      	adds	r6, #1
 8003916:	e7f2      	b.n	80038fe <__libc_init_array+0x1e>
 8003918:	080046fc 	.word	0x080046fc
 800391c:	080046fc 	.word	0x080046fc
 8003920:	080046fc 	.word	0x080046fc
 8003924:	08004700 	.word	0x08004700

08003928 <_init>:
 8003928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800392a:	bf00      	nop
 800392c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800392e:	bc08      	pop	{r3}
 8003930:	469e      	mov	lr, r3
 8003932:	4770      	bx	lr

08003934 <_fini>:
 8003934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003936:	bf00      	nop
 8003938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800393a:	bc08      	pop	{r3}
 800393c:	469e      	mov	lr, r3
 800393e:	4770      	bx	lr
